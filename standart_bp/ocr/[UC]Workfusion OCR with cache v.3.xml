<?xml version="1.0" encoding="US-ASCII" standalone="yes"?>
<objectListWrapper>
    <objects>
        <objectContainer>
            <compositeWorkSetting>
                <category>
                    <automation>false</automation>
                    <description></description>
                    <enabled>true</enabled>
                    <executingType>HUMAN</executingType>
                    <name>Other</name>
                    <private>false</private>
                    <publicId>dd92f240-144b-4fef-8476-4ec0acbc1104</publicId>
                </category>
                <contentType>NORMAL</contentType>
                <description>WF OCR v3</description>
                <enabled>true</enabled>
                <name>[UC]Workfusion OCR with cache v.3</name>
                <publicId>9df91444-4409-4fb7-8ec7-4f399d7578ca</publicId>
                <version>
                    <componentUuid>50d42d2e-fd4b-4524-a521-8e88b173cc96</componentUuid>
                    <incrementalVersion>1.1</incrementalVersion>
                    <lastInChain>true</lastInChain>
                    <lastModified>2018-09-25T13:10:35Z</lastModified>
                    <versionUuid>71c98f71-c50f-429d-9579-4e078e91cf91</versionUuid>
                </version>
                <automationQualityThreshold>80</automationQualityThreshold>
                <campaign>
                    <active>true</active>
                    <businessRules>
                        <rule>
                            <content># Rule.Definition={"moderationRule":false,"approveAllRule":false,"splitData":false,"splitRule":false,"splitRuleSuffix":"","joinRule":false,"joinRuleSuffix":"","streamingRule":false,"streamingRuleSuffix":"","namedRule":false,"namedRuleName":""}
package com.freedomoss.requester;

# list any import classes here.
import java.util.Map;
import java.util.ArrayList;
import com.freedomoss.objective.model.CompositeRuleContext;
import com.freedomoss.objective.model.CompositeRuleDataItemContext;
import org.slf4j.Logger;


# declare any global variables here
global CompositeRuleContext source
global Logger log
global Map params


rule "Rule context initialization"
auto-focus true
no-loop
agenda-group "initialization-group"
    when
        $ctx:CompositeRuleContext(initialized == false);
    then
        # insert processed facts into memory
        $ctx.updateWorkingMemory();
        # move to business rules
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("calculation").setFocus();
end

# RuleOutcome.Definition={"outcomeId":"Yes","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"cache_hit","value":"full","operator":"EQ"}],"customConditions":[]}
rule "1. Send records to 'Yes' when cache_hit EQ 'full'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("cache_hit", "EQ", "full"));

    then
        $ctx.sendResultTo("Yes", $item);
end



# RuleOutcome.Definition={"outcomeId":"No","conditional":false,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[],"customConditions":[]}
rule "Send unprocessed result to unconditional outcome(s)"
agenda-group "calculation"
dialect "mvel"
salience 80
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
    then
        $ctx.sendResultToUnconditionalOutcomes($item, true);
end</content>
                            <name>Cache hit?</name>
                            <ruleType>WORKFLOW_RULE</ruleType>
                            <ruleTypeUI>Composite</ruleTypeUI>
                            <uuid>1706a988-73a1-45d8-897a-13d9d837991a</uuid>
                            <workflowRuleMode>SIMPLE</workflowRuleMode>
                        </rule>
                        <rule>
                            <content># Rule.Definition={"moderationRule":false,"approveAllRule":false,"splitData":false,"splitRule":false,"splitRuleSuffix":"","joinRule":false,"joinRuleSuffix":"","streamingRule":false,"streamingRuleSuffix":"","namedRule":false,"namedRuleName":""}
package com.freedomoss.requester;

# list any import classes here.
import java.util.Map;
import java.util.ArrayList;
import com.freedomoss.objective.model.CompositeRuleContext;
import com.freedomoss.objective.model.CompositeRuleDataItemContext;
import org.slf4j.Logger;


# declare any global variables here
global CompositeRuleContext source
global Logger log
global Map params


rule "Rule context initialization"
auto-focus true
no-loop
agenda-group "initialization-group"
    when
        $ctx:CompositeRuleContext(initialized == false);
    then
        # insert processed facts into memory
        $ctx.updateWorkingMemory();
        # move to business rules
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("calculation").setFocus();
end

# RuleOutcome.Definition={"outcomeId":"OCR Failed","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_failed","value":"true","operator":"EQ"}],"customConditions":[]}
rule "1. Send records to 'OCR Failed' when ocr_failed EQ 'true'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_failed", "EQ", "true"));

    then
        $ctx.sendResultTo("OCR Failed", $item);
end

# RuleOutcome.Definition={"outcomeId":"Standard (without xml export format)","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_failed","value":"false","operator":"EQ"},{"fieldName":"xml_export_format_flag","value":"false","operator":"EQ"}],"customConditions":[]}
rule "2. Send records to 'Standard (without xml export format)' when ocr_failed EQ 'false' AND xml_export_format_flag EQ 'false'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_failed", "EQ", "false"));
        eval($item.checkValue("xml_export_format_flag", "EQ", "false"));

    then
        $ctx.sendResultTo("Standard (without xml export format)", $item);
end

# RuleOutcome.Definition={"outcomeId":"OCR Not Failed","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_failed","value":"false","operator":"EQ"},{"fieldName":"xml_export_format_flag","value":"true","operator":"EQ"}],"customConditions":[]}
rule "3. Send records to 'OCR Not Failed' when ocr_failed EQ 'false' AND xml_export_format_flag EQ 'true'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_failed", "EQ", "false"));
        eval($item.checkValue("xml_export_format_flag", "EQ", "true"));

    then
        $ctx.sendResultTo("OCR Not Failed", $item);
end



rule "Send unprocessed result to unconditional outcome(s)"
agenda-group "calculation"
dialect "mvel"
salience 80
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
    then
        $ctx.sendResultToUnconditionalOutcomes($item, true);
end</content>
                            <name>OCR Router</name>
                            <ruleType>WORKFLOW_RULE</ruleType>
                            <ruleTypeUI>Composite</ruleTypeUI>
                            <uuid>4923268f-982e-4832-a769-9fe3068d8de3</uuid>
                            <workflowRuleMode>SIMPLE</workflowRuleMode>
                        </rule>
                        <rule>
                            <content># Rule.Definition={"moderationRule":false,"approveAllRule":false,"splitData":false,"splitRule":false,"splitRuleSuffix":"","joinRule":false,"joinRuleSuffix":"","streamingRule":false,"streamingRuleSuffix":"","namedRule":false,"namedRuleName":""}
package com.freedomoss.requester;

# list any import classes here.
import java.util.Map;
import java.util.ArrayList;
import com.freedomoss.objective.model.CompositeRuleContext;
import com.freedomoss.objective.model.CompositeRuleDataItemContext;
import org.slf4j.Logger;


# declare any global variables here
global CompositeRuleContext source
global Logger log
global Map params


rule "Rule context initialization"
auto-focus true
no-loop
agenda-group "initialization-group"
    when
        $ctx:CompositeRuleContext(initialized == false);
    then
        # insert processed facts into memory
        $ctx.updateWorkingMemory();
        # move to business rules
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("calculation").setFocus();
end

# RuleOutcome.Definition={"outcomeId":"TOOD","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_type","value":"tood","operator":"EQ"}],"customConditions":[]}
rule "1. Send records to 'TOOD' when ocr_type EQ 'tood'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_type", "EQ", "tood"));

    then
        $ctx.sendResultTo("TOOD", $item);
end

# RuleOutcome.Definition={"outcomeId":"Standard","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_type","value":"standard","operator":"EQ"}],"customConditions":[]}
rule "2. Send records to 'Standard' when ocr_type EQ 'standard'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_type", "EQ", "standard"));

    then
        $ctx.sendResultTo("Standard", $item);
end



rule "Send unprocessed result to unconditional outcome(s)"
agenda-group "calculation"
dialect "mvel"
salience 80
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
    then
        $ctx.sendResultToUnconditionalOutcomes($item, true);
end</content>
                            <name>OCR Type</name>
                            <ruleType>WORKFLOW_RULE</ruleType>
                            <ruleTypeUI>Composite</ruleTypeUI>
                            <uuid>b0cfe2f8-d9e1-45a3-a4f2-cbade461f59a</uuid>
                            <workflowRuleMode>SIMPLE</workflowRuleMode>
                        </rule>
                        <rule>
                            <content># Rule.Definition={"moderationRule":false,"approveAllRule":false,"splitData":false,"splitRule":false,"splitRuleSuffix":"","joinRule":false,"joinRuleSuffix":"","streamingRule":false,"streamingRuleSuffix":"","namedRule":false,"namedRuleName":""}
package com.freedomoss.requester;

# list any import classes here.
import java.util.Map;
import java.util.ArrayList;
import com.freedomoss.objective.model.CompositeRuleContext;
import com.freedomoss.objective.model.CompositeRuleDataItemContext;
import org.slf4j.Logger;


# declare any global variables here
global CompositeRuleContext source
global Logger log
global Map params


rule "Rule context initialization"
auto-focus true
no-loop
agenda-group "initialization-group"
    when
        $ctx:CompositeRuleContext(initialized == false);
    then
        # insert processed facts into memory
        $ctx.updateWorkingMemory();
        # move to business rules
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("calculation").setFocus();
end

# RuleOutcome.Definition={"outcomeId":"TOOD","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_type","value":"tood","operator":"EQ"}],"customConditions":[]}
rule "1. Send records to 'TOOD' when ocr_type EQ 'tood'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_type", "EQ", "tood"));

    then
        $ctx.sendResultTo("TOOD", $item);
end

# RuleOutcome.Definition={"outcomeId":"Standard","conditional":true,"reworkBySameWorker":false,"assignToSameWorker":false,"anableLogging":false,"sendRejectNotification":false,"assignToAnyWorker":false,"approveRelatedAssignments":false,"rejectRelatedAssignments":false,"renameAutomationAnswerItem":false,"conditions":[{"fieldName":"ocr_type","value":"standard","operator":"EQ"}],"customConditions":[]}
rule "2. Send records to 'Standard' when ocr_type EQ 'standard'"
agenda-group "calculation"
dialect "mvel"
salience 100
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
        eval($item.checkValue("ocr_type", "EQ", "standard"));

    then
        $ctx.sendResultTo("Standard", $item);
end



rule "Send unprocessed result to unconditional outcome(s)"
agenda-group "calculation"
dialect "mvel"
salience 80
    when
        $ctx:CompositeRuleContext(initialized == true);
        $item:CompositeRuleDataItemContext();
    then
        $ctx.sendResultToUnconditionalOutcomes($item, true);
end</content>
                            <name>OCR Type</name>
                            <ruleType>WORKFLOW_RULE</ruleType>
                            <ruleTypeUI>Composite</ruleTypeUI>
                            <uuid>cfd635f7-c569-4402-932d-32198e54c267</uuid>
                            <workflowRuleMode>SIMPLE</workflowRuleMode>
                        </rule>
                    </businessRules>
                    <campaignMaps/>
                    <campaigns>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to get response from OCR api, and if OCR Process is "Completed", get OCRed document for each OCR export format parameter, put them on S3 and create OCR JSON with result OCR information.

@Author: Alexey Shalak
@Author: Denis Uraev
@Version: 1.1
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config charset="UTF-8"&gt;
  
  	&lt;var-def name="ocr_url"&gt;
  		&lt;var-global name="ocr_url"/&gt;
  	&lt;/var-def&gt;
    
    &lt;var-def name="ocr_username"&gt;
  		&lt;var-global name="ocr_username"/&gt;
  	&lt;/var-def&gt;
  
    &lt;var-def name="ocr_password"&gt;
  		&lt;var-global name="ocr_password"/&gt;
  	&lt;/var-def&gt;
  
	&lt;var-def name="ocr_failed"&gt;
		false
	&lt;/var-def&gt;

	&lt;var-def name="xml_export_format_flag"&gt;
		false
	&lt;/var-def&gt;
  
  	&lt;var-def name="statusResponse"&gt;
      	&lt;case&gt;
			&lt;if condition='${ocr_username.toString().isEmpty() || ocr_password.toString().isEmpty()}'&gt;
				&lt;http url="${ocr_url.toString()}/getTaskStatus?taskId=${ocr_task_id.toString()}" method="get" /&gt;
			&lt;/if&gt;
          	&lt;else&gt;
            	&lt;http url="${ocr_url.toString()}/getTaskStatus?taskId=${ocr_task_id.toString()}" method="get" username="${ocr_username.toString()}" password="${ocr_password.toString()}" /&gt;
          	&lt;/else&gt;
		&lt;/case&gt;
	&lt;/var-def&gt;
    &lt;log&gt;&lt;template&gt;${statusResponse}&lt;/template&gt;&lt;/log&gt;
	&lt;var-def name="taskStatus"&gt;
      	&lt;xpath expression="string(//response/task/@status)"&gt;
			&lt;var name="statusResponse" /&gt;
		&lt;/xpath&gt;
	&lt;/var-def&gt;

	&lt;case&gt;
		&lt;if
			condition='${!"Completed".equals(taskStatus.toString()) @and !"ProcessingFailed".equals(taskStatus.toString())}'&gt;
			&lt;release time-in-seconds="30" /&gt;
			&lt;exit /&gt;
		&lt;/if&gt;

		&lt;if condition='${"ProcessingFailed".equals(taskStatus.toString())}'&gt;
			&lt;script&gt;&lt;![CDATA[
				sys.defineVariable("ocr_failed", true);
				sys.defineVariable("ocr_failed_response", statusResponse);
			]]&gt;&lt;/script&gt;
		&lt;/if&gt;

		&lt;if condition='${"Completed".equals(taskStatus.toString())}'&gt;

			&lt;script language="groovy"&gt;&lt;![CDATA[
				import groovy.json.JsonSlurper;

				List export_format_list = Arrays.asList(no_cached_export_format.toString().split(","));
				sys.defineVariable("export_format_list", export_format_list);

				List&lt;Map&gt; ocr_result_list = new ArrayList();
				sys.defineVariable("ocr_result_list", ocr_result_list);

				def original_document_url_object = new java.net.URI(original_document_url.toString())
				def original_document_name = original_document_url_object.getPath().tokenize('/').last().tokenize('.').first()
				
				sys.defineVariable("original_document_name", original_document_name);
			]]&gt;&lt;/script&gt;

			&lt;loop item="format"&gt;
				&lt;list&gt;
					&lt;var name="export_format_list" /&gt;
				&lt;/list&gt;
				&lt;body&gt;
					&lt;case&gt;
						&lt;if condition='${export_format_list.toList().indexOf(format) == 0}'&gt;
							&lt;var-def name="result_url"&gt;
								&lt;xpath expression="string(//response/task/@resultUrl)"&gt;
									&lt;var name="statusResponse" /&gt;
								&lt;/xpath&gt;
							&lt;/var-def&gt;
						&lt;/if&gt;

						&lt;if condition='${export_format_list.toList().indexOf(format) == 1}'&gt;
							&lt;var-def name="result_url"&gt;
								&lt;xpath expression="string(//response/task/@resultUrl2)"&gt;
									&lt;var name="statusResponse" /&gt;
								&lt;/xpath&gt;
							&lt;/var-def&gt;
						&lt;/if&gt;

						&lt;if condition='${export_format_list.toList().indexOf(format) == 2}'&gt;
							&lt;var-def name="result_url"&gt;
								&lt;xpath expression="string(//response/task/@resultUrl3)"&gt;
									&lt;var name="statusResponse" /&gt;
								&lt;/xpath&gt;
							&lt;/var-def&gt;
						&lt;/if&gt;
					&lt;/case&gt;

					&lt;case&gt;
						&lt;if condition='${export_format_list.toList().indexOf(format) @lt 3}'&gt;
							&lt;var-def name="result"&gt;
								&lt;http url="${result_url}" charset="UTF-8" /&gt;
							&lt;/var-def&gt;

							&lt;case&gt;
								&lt;if condition='${format.toString().equals("html")}'&gt;
									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-html.html&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;text/html&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
								&lt;if condition='${format.toString().equals("pdfSearchable")}'&gt;
									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-pdf.pdf&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;application/pdf&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
								&lt;if condition='${format.toString().equals("xml")}'&gt;
									&lt;var-def name="xml_export_format_flag"&gt;
										&lt;script return="flag"&gt;&lt;![CDATA[
											String flag = "true";
										]]&gt;&lt;/script&gt;
									&lt;/var-def&gt;

									&lt;var-def name="result"&gt;
										&lt;script return="res"&gt;&lt;![CDATA[
											// Removing BOM
											String res = result.toString().replaceAll("^\uFEFF", "");
										]]&gt;&lt;/script&gt;
									&lt;/var-def&gt;

									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-xml.xml&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;text/xml&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
								&lt;if condition='${format.toString().equals("xmlForCorrectedImage")}'&gt;
									&lt;var-def name="xml_export_format_flag"&gt;
										&lt;script return="flag"&gt;&lt;![CDATA[
											String flag = "true";
										]]&gt;&lt;/script&gt;
									&lt;/var-def&gt;

									&lt;var-def name="result"&gt;
										&lt;script return="res"&gt;&lt;![CDATA[
											// Removing BOM
											String res = result.toString().replaceAll("^\uFEFF", "");
										]]&gt;&lt;/script&gt;
									&lt;/var-def&gt;

									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-xmlForCorrectedImage.xml&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;text/xml&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
								&lt;if condition='${format.toString().equals("txt")}'&gt;
									&lt;var-def name="path"&gt;
										&lt;template&gt;${bp_run_id}/${document_uuid}/${original_document_name}-txt.txt&lt;/template&gt;
									&lt;/var-def&gt;

									&lt;var-def name="type"&gt;
										&lt;template&gt;text/plain&lt;/template&gt;
									&lt;/var-def&gt;
								&lt;/if&gt;
							&lt;/case&gt;

							&lt;var-def name="ocr_document_url"&gt;
								&lt;s3 bucket="${s3_bucket_name}"&gt;
									&lt;s3-put-public path="${path}" content="${result}"
										content-type="${type}" content-disposition="inline" /&gt;
								&lt;/s3&gt;
							&lt;/var-def&gt;

							&lt;script language="groovy"&gt;&lt;![CDATA[
								def ocr_document_name = ocr_document_url.toString().tokenize('/').last().tokenize('.').first()
							
								Map map = new HashMap();
								
								map.put("original_document_url", original_document_url.toString());
								map.put("original_document_name", original_document_name.toString());
								map.put("ocr_document_url", ocr_document_url.toString());
								map.put("ocr_document_name", ocr_document_name);
								map.put("ocr_export_format", format.toString());
								map.put("ocr_document_format", path.toString().substring(path.toString().lastIndexOf(".") + 1, path.toString().length()));

								ocr_result_list.toList().add(map);
							]]&gt;&lt;/script&gt;
						&lt;/if&gt;
					&lt;/case&gt;

				&lt;/body&gt;
			&lt;/loop&gt;

			&lt;script language="groovy"&gt;&lt;![CDATA[
				import com.google.gson.Gson;

				Gson gson = new Gson();
				String result_json = gson.toJson(ocr_result_list.toList());
				sys.defineVariable("ocr_json", result_json);
			]]&gt;&lt;/script&gt;
		&lt;/if&gt;
	&lt;/case&gt;

	&lt;export include-original-data="true"&gt;
		&lt;single-column name="xml_export_format_flag" value="${xml_export_format_flag}" /&gt;
		&lt;single-column name="ocr_failed" value="${ocr_failed}" /&gt;
		&lt;single-column name="ocr_failed_response" value="${ocr_failed_response}" /&gt;
		&lt;single-column name="ocr_json" value="${ocr_json}" /&gt;
        &lt;single-column name="ocr_status_response" value="${statusResponse}"/&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>26cb17b2-61f7-4831-9798-13d866ff4ae1</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>Response from OCR</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>26cb17b2-61f7-4831-9798-13d866ff4ae1</uuid>
                                <version>
                                    <componentUuid>2ce7325f-d825-4c56-ab3b-fdc248e89ee2</componentUuid>
                                    <incrementalVersion>1.2</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>9d4e81ad-f72d-4665-a5c6-f41e68efa054</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>Response from OCR</title>
                            <type>SINGLE</type>
                            <uuid>0de6f169-fd47-4bcc-ab0f-2c510919caba</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>9ed78f45-63e6-4007-934e-a3827a7d39d3</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>e516e70a-1b10-46c5-a32a-a0e4edbde3c1</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to look for OCR cache for each OCR export format by all input parameters, and if it full hits we go to last BP step, otherwise go to the OCR step.

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy"&gt;

	&lt;var-def name="document_link"&gt;
		&lt;template&gt;${sys.getVar("original_document_url")}&lt;/template&gt;
	&lt;/var-def&gt;

	&lt;script&gt;&lt;![CDATA[
		isUnsuccessfulStatusCode = {statusCode -&gt; return statusCode.toString().matches('^[45]\\d{2}')};
	]]&gt;&lt;/script&gt;

	&lt;try&gt;
		&lt;body&gt;
			&lt;var-def name="document"&gt;
				&lt;http url="${document_link}" /&gt;
			&lt;/var-def&gt;
		&lt;/body&gt;
		&lt;catch&gt;
		&lt;/catch&gt;
	&lt;/try&gt;

	&lt;case&gt;
		&lt;if condition="${isUnsuccessfulStatusCode(http.statusCode)}"&gt;
			&lt;try&gt;
				&lt;body&gt;
					&lt;var-def name="document_link"&gt;
						&lt;template&gt;${org.apache.commons.httpclient.util.URIUtil.encodeQuery(document_link.toString())}
						&lt;/template&gt;
					&lt;/var-def&gt;
					&lt;var-def name="document"&gt;
						&lt;http url="${document_link}" /&gt;
					&lt;/var-def&gt;
				&lt;/body&gt;
				&lt;catch&gt;
				&lt;/catch&gt;
			&lt;/try&gt;
		&lt;/if&gt;
	&lt;/case&gt;

	&lt;case&gt;
		&lt;if condition="${isUnsuccessfulStatusCode(http.statusCode)}"&gt;
			&lt;script&gt;&lt;![CDATA[
				throw new RuntimeException("Failed to fetch url: " + document_link + " status code: " + http.statusCode);
			]]&gt;&lt;/script&gt;
		&lt;/if&gt;
	&lt;/case&gt;

	&lt;var-def name="document_hash"&gt;
		&lt;template&gt;${sys.getVar("document_hash")}&lt;/template&gt;
	&lt;/var-def&gt;
	&lt;case&gt;
		&lt;if condition="${document_hash.toString().length() == 0}"&gt;
			&lt;var-def name="document_hash"&gt;
				&lt;script
					return="org.apache.commons.codec.digest.DigestUtils.md5Hex(document.toBinary())" /&gt;
			&lt;/var-def&gt;
		&lt;/if&gt;
	&lt;/case&gt;

	&lt;!-- If the datastore is missing --&gt;
	&lt;create-datastore name="${cache_datastore}"&gt;
		&lt;datastore-column name="key" /&gt;
		&lt;datastore-column name="ocr_type" /&gt;
		&lt;datastore-column name="export_format" /&gt;
        &lt;datastore-column name="text_type" /&gt;
		&lt;datastore-column name="document_language" /&gt;
		&lt;datastore-column name="ocr_xml_char_recognition" /&gt;
		&lt;datastore-column name="allowed_region_types" /&gt;
		&lt;datastore-column name="custom_regions" /&gt;
		&lt;datastore-column name="change_dpi" /&gt;
		&lt;datastore-column name="invert_image" /&gt;
		&lt;datastore-column name="discard_color_image" /&gt;
		&lt;datastore-column name="remove_color_objects" /&gt;
		&lt;datastore-column name="remove_color_objects_type" /&gt;
	&lt;/create-datastore&gt;

	&lt;script&gt;&lt;![CDATA[
		export_format_list = Arrays.asList(export_format.toString().split(","));
		sys.defineVariable("exportFormatList", export_format_list);

		no_cached_export_format_list = new ArrayList(export_format_list);

		List ocr_result_list = new ArrayList();
		sys.defineVariable("ocr_result_list", ocr_result_list);
	]]&gt;&lt;/script&gt;

	&lt;loop item="format"&gt;
		&lt;list&gt;
			&lt;var name="exportFormatList" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;var-def name="cachedRecord"&gt;
				&lt;datastore name="${cache_datastore}" max="1"&gt;
            		&lt;template&gt;
            			SELECT * FROM @this WHERE "key"='${document_hash}' AND "ocr_type"='${ocr_type}' AND "export_format"='${format}' AND "document_language"='${document_language}' AND "ocr_xml_char_recognition"='${ocr_xml_char_recognition}' AND "allowed_region_types"='${allowed_region_types}' AND "custom_regions"='${custom_regions}' AND "change_dpi"='${change_dpi}' AND "invert_image"='${invert_image}' AND "discard_color_image"='${discard_color_image}' AND "remove_color_objects"='${remove_color_objects}' AND "remove_color_objects_type"='${remove_color_objects_type}'    
          			&lt;/template&gt;
				&lt;/datastore&gt;
			&lt;/var-def&gt;
          
          	&lt;case&gt;
				&lt;if condition='${cachedRecord.toString().length() != 0}'&gt;
                  	&lt;var-def name="value"&gt;
                            &lt;xpath expression='/row/ocr_json/text()'&gt;
                                &lt;var name="cachedRecord"/&gt;
                            &lt;/xpath&gt;
                    &lt;/var-def&gt;
                  
					&lt;script&gt;&lt;![CDATA[
						no_cached_export_format_list.remove(format.toString());

						ocr_result_list.toList().add(new HashMap(new groovy.json.JsonSlurper().parseText(value.toString())));
					]]&gt;&lt;/script&gt;
				&lt;/if&gt;
			&lt;/case&gt;  
		&lt;/body&gt;
	&lt;/loop&gt;
  
  	&lt;script&gt;&lt;![CDATA[
		import com.google.gson.Gson;

		String no_cached_export_format = no_cached_export_format_list.toString().replaceAll("[\\[\\]\\s]","");
		sys.defineVariable("no_cached_export_format", no_cached_export_format);

		Gson gson = new Gson();
		String result_json = gson.toJson(ocr_result_list.toList());
		sys.defineVariable("cached_ocr_json", result_json);
	]]&gt;&lt;/script&gt;

	&lt;export include-original-data="true"&gt;
		&lt;single-column name="document_hash" value="${document_hash}" /&gt;
      	&lt;single-column name="no_cached_export_format" value="${no_cached_export_format}" /&gt;
      	&lt;case&gt; 
          	&lt;if condition='${no_cached_export_format_list.size() == export_format_list.size()}'&gt;
            	&lt;single-column name="cache_hit" value="none"/&gt;
            &lt;/if&gt;
          	&lt;if condition='${no_cached_export_format_list.size() == 0}'&gt;
            	&lt;single-column name="cache_hit" value="full"/&gt;
              	&lt;single-column name="ocr_failed" value="false"/&gt;
            &lt;/if&gt;
            &lt;else&gt;
                &lt;single-column name="cache_hit" value="half"/&gt;
            &lt;/else&gt;
        &lt;/case&gt;
      	&lt;single-column name="cached_ocr_json" value="${cached_ocr_json}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>67f427b6-d067-4cbf-85cb-7632b9dd5098</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>Look for OCR cache</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>67f427b6-d067-4cbf-85cb-7632b9dd5098</uuid>
                                <version>
                                    <componentUuid>bdba50d6-2433-4aec-bc74-5a7e4ef37d8f</componentUuid>
                                    <incrementalVersion>1.3</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>6664967b-dd97-45a9-8859-1d397ccf3f9d</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>Look for OCR cache</title>
                            <type>SINGLE</type>
                            <uuid>108251c1-4a82-415f-a4fb-29b207173b2e</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>a6e09641-8eda-44db-9f4e-54d181dab96b</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>b38400b8-4dcc-413f-82db-f4eaa2fed73d</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to make request to the OCR api, with our input parameters , but before, get one OCR taskId for all pages of document and make valid OCR api URL.

@Author: Alexey Shalak
@Author: Sergey Emelianov
@Version: 1.1
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
    scriptlang="java"&gt;

    &lt;!-- reading pNG from S3 --&gt;
    &lt;script&gt;&lt;![CDATA[
        import org.json.XML;
        import java.util.List;
        import java.util.ArrayList;
        import org.json.JSONObject;
        import org.json.JSONArray;
        import com.freedomoss.workfusion.utils.gson.GsonUtils;

        static String getJSONValue(String jsonString, String key) {
            try{
                JSONObject json = new JSONObject(jsonString);
                return json.get(key).get("directUrl").toString();
            } catch (Exception e){
                return "";
            }
        }
    ]]&gt;&lt;/script&gt;
  
    &lt;var-def name="jsonSize"&gt;
        &lt;var name="pages" /&gt;
    &lt;/var-def&gt;
  
    &lt;while condition="true" maxloops="${jsonSize.toInt()}" index="i"&gt;
        &lt;var-def name="jsonKey"&gt;
            &lt;template&gt;fileList-${i.toInt()}&lt;/template&gt;
        &lt;/var-def&gt;
        &lt;!-- reading pNG from S3 --&gt;
        &lt;var-def name="jsonValue-${i}"&gt;
            &lt;script return="getJSONValue(json_file_urls.toString(), jsonKey.toString())" /&gt;
        &lt;/var-def&gt;
    &lt;/while&gt;

    &lt;var-def name="pagesList"&gt;
        &lt;while condition="true" maxloops="${jsonSize.toInt()}" index="i"&gt;
            &lt;var name="jsonValue-${i}" /&gt;
        &lt;/while&gt;
    &lt;/var-def&gt;

    &lt;var-def name="ocr_url"&gt;
        &lt;var-global name="ocr_url"/&gt;
    &lt;/var-def&gt;
  
    &lt;var-def name="ocr_username"&gt;
        &lt;var-global name="ocr_username"/&gt;
    &lt;/var-def&gt;
  
    &lt;var-def name="ocr_password"&gt;
        &lt;var-global name="ocr_password"/&gt;
    &lt;/var-def&gt;
  
    &lt;var-def name="submitImage"&gt;
        &lt;case&gt;
            &lt;if condition='${ocr_username.toString().isEmpty() || ocr_password.toString().isEmpty()}'&gt;
                &lt;http url="${ocr_url}/submitImage" method="post" multipart="true"&gt;
                    &lt;http-param name="file" isfile="true"&gt;
                        &lt;http url="${original_document_url}" /&gt;
                    &lt;/http-param&gt;
                &lt;/http&gt;
            &lt;/if&gt;
            &lt;else&gt;
                &lt;http url="${ocr_url}/submitImage" method="post" multipart="true" username="${ocr_username.toString()}" password="${ocr_password.toString()}"&gt;
                    &lt;http-param name="file" isfile="true"&gt;
                        &lt;http url="${original_document_url}" /&gt;
                    &lt;/http-param&gt;
                &lt;/http&gt;
            &lt;/else&gt;
        &lt;/case&gt;
    &lt;/var-def&gt;
    
    &lt;var-def name="taskId"&gt;
        &lt;xpath expression="string(//response/task/@id)"&gt;
            &lt;var name="submitImage" /&gt;
        &lt;/xpath&gt;
    &lt;/var-def&gt;
    &lt;log level="INFO" message="task id ${taskId}"/&gt;
&lt;!--    &lt;case&gt;
        &lt;if condition="${pagesList.toList().size() &amp;gt; 1}"&gt;
            &lt;loop item="pagesListElement"&gt;
                &lt;list&gt;
                    &lt;var name="pagesList" /&gt;
                &lt;/list&gt;
                &lt;body&gt;
                    &lt;var-def name="submitImageResponse"&gt;
                      &lt;html-to-xml&gt;
                        &lt;http url="${ocr_url}/submitImage" method="post" multipart="true"&gt;
                            &lt;http-param name="file" isfile="true"&gt;
                                &lt;http url="${pagesListElement}" /&gt;
                            &lt;/http-param&gt;
                            &lt;http-param name="taskId"&gt;&lt;template&gt;${taskId.toString()}&lt;/template&gt;&lt;/http-param&gt;
                        &lt;/http&gt;
                       &lt;/html-to-xml&gt;
                     &lt;/var-def&gt;
                     
                    &lt;log level="info" message="sending out ${pagesListElement} for task ${taskId}, pages ${pages}"/&gt;
                    
                  &lt;/body&gt;
            &lt;/loop&gt;
        &lt;/if&gt;
    &lt;/case&gt;--&gt;
  
    &lt;script&gt;&lt;![CDATA[
        //-------------------------------------------------------making processDocument url-------------------------------------------------------
        String url = ocr_url.toString() + "/processDocument?taskId=" + taskId.toString() + "&amp;exportFormat=" + no_cached_export_format.toString() + "&amp;textType=" + text_type.toString() + "&amp;language=" + document_language.toString() + "&amp;xml:writeRecognitionVariants=" + ocr_xml_char_recognition.toString() + "&amp;correctSkew=true&amp;correctOrientation=true&amp;allowedRegionTypes=" + allowed_region_types.toString() + "&amp;invertImage=" + invert_image.toString() + "&amp;discardColorImage=" + discard_color_image.toString() + "&amp;removeColorObjectsType=" + remove_color_objects_type.toString();
        StringBuilder process_document_url = new StringBuilder(url.toString());
        
        if( !custom_regions.toString().isEmpty()) {
            process_document_url.append("&amp;customRegions=" + custom_regions.toString());
        }

        if( !change_dpi.toString().isEmpty()) {
            process_document_url.append("&amp;changeDPI=" + change_dpi.toString());
        }

        if( !remove_color_objects.toString().isEmpty()) {
            process_document_url.append("&amp;removeColorObjects=" + remove_color_objects.toString());
        }
        sys.defineVariable("processDocumentUrl", process_document_url)
    ]]&gt;&lt;/script&gt;
  	&lt;log level="INFO" message="process document url: + ${processDocumentUrl.toString()}"/&gt;
    &lt;var-def name="processDocument"&gt;
        &lt;case&gt;
            &lt;if condition='${ocr_username.toString().isEmpty() || ocr_password.toString().isEmpty()}'&gt;
                &lt;http url="${processDocumentUrl.toString()}" method="get" /&gt;
            &lt;/if&gt;
            &lt;else&gt;
                &lt;http url="${processDocumentUrl.toString()}" method="get" username="${ocr_username.toString()}" password="${ocr_password.toString()}" /&gt;
            &lt;/else&gt;
        &lt;/case&gt;
    &lt;/var-def&gt;
  
    &lt;export include-original-data="true"&gt;
        &lt;single-column name="ocr_task_id" value="${taskId}"/&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>e55fcb16-b738-4fc7-bd8f-2d5fa3d9ac53</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>[TOOD] OCR</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>e55fcb16-b738-4fc7-bd8f-2d5fa3d9ac53</uuid>
                                <version>
                                    <componentUuid>1eb8734e-5f28-4ca0-9550-6fb51d01d339</componentUuid>
                                    <incrementalVersion>1.4</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>425b0340-95a5-4f9e-b10e-76974f05cb72</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>[TOOD] OCR</title>
                            <type>SINGLE</type>
                            <uuid>11e314fa-9f2b-4589-98d1-1b708d550ee1</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>080eba7f-687b-4358-b2b1-f7c98f73963b</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>8e27347b-6e7f-4a9c-b361-455242f887e7</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- to export --&gt;
&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="java" charset="UTF-8"&gt;
	&lt;script language="groovy"&gt;&lt;![CDATA[
		import groovy.json.JsonSlurper;

		List&lt;Map&gt; ocr_result_list = new JsonSlurper().parseText(ocr_json.toString());
		sys.defineVariable("ocr_result_list", ocr_result_list);

		List&lt;Map&gt; update_ocr_result_list = new ArrayList();
		sys.defineVariable("update_ocr_result_list", update_ocr_result_list);

		String ocr_document_name = ocr_result_list.get(0).get("ocr_document_name").toString();
		sys.defineVariable("ocr_document_name", ocr_document_name);

		String ocr_raw_processed_document_name = ocr_result_list.get(0).get("ocr_raw_processed_document_name").toString();
		sys.defineVariable("ocr_raw_processed_document_name", ocr_raw_processed_document_name);

		String ocr_document_format = ocr_result_list.get(0).get("ocr_document_format").toString();
		sys.defineVariable("ocr_document_format", ocr_document_format);
	]]&gt;&lt;/script&gt;
  
  	&lt;var-def name="placeholder"&gt;
		&lt;template&gt;converted_pdf_link_PLACEHOLDER&lt;/template&gt;
	&lt;/var-def&gt;
	
	&lt;var-def name="jsonKey"&gt;
		&lt;template&gt;fileList-1&lt;/template&gt;
	&lt;/var-def&gt;

	&lt;s3 bucket="${s3_bucket_name}"&gt;
		&lt;var-def name="xmlWords"&gt;
			&lt;s3-get
				name="${bp_run_id}/${document_uuid}/${ocr_raw_processed_document_name}.${ocr_document_format}" /&gt;
		&lt;/var-def&gt;
	&lt;/s3&gt;
  
  	&lt;var-def name="imageLink"&gt;
		&lt;script return="getJSONValue(json_file_urls_for_manual.toString(), jsonKey.toString())"&gt;&lt;![CDATA[
			import org.json.XML;
			import java.util.List;
			import java.util.ArrayList;
			import org.json.JSONObject;
			import org.json.JSONArray;
			import com.freedomoss.workfusion.utils.gson.GsonUtils;


			static String getJSONValue(String jsonString, String key) {
				try{
					JSONObject json = new JSONObject(jsonString);
					return json.get(key).get("directUrl").toString();
				} catch (Exception e){
					return "";
				}
			}

			public static String addImgTag(String xml, String placeholder, String fileUrl){
				return xml.replace(placeholder, fileUrl.substring(0, fileUrl.length()-5)).replace("charset=UTF-8\"","charset=UTF-8\"/");
			}

		]]&gt;&lt;/script&gt;
	&lt;/var-def&gt;

	&lt;var-def name="htmlWordsDocumentRaw"&gt;
		&lt;xslt&gt;
			&lt;xml&gt;
				&lt;var name="xmlWords" /&gt;
			&lt;/xml&gt;
			&lt;stylesheet&gt;
				&lt;template&gt;&lt;![CDATA[ 
  &lt;xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml"&gt;
  &lt;xsl:output method="html" omit-xml-declaration="yes" media-type="text/html" indent="no" /&gt;

      &lt;xsl:variable name="currentHeight"&gt;
          &lt;xsl:value-of select="sum(//wfocr:page/@height)" /&gt;
      &lt;/xsl:variable&gt;

	  &lt;xsl:variable name="countPages"&gt;
          &lt;xsl:value-of select="count(//wfocr:page)"/&gt;
      &lt;/xsl:variable&gt;

      &lt;xsl:template match="wfocr:document"&gt;
          &lt;html&gt;
              &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;!-- Version 1.7 --&amp;gt;&lt;/xsl:text&gt;
              &lt;head&gt;
                  &lt;style type="text/css"&gt;div.n{position:absolute;white-space:nowrap;text-align:left;vertical-align:bottom;letter-spacing:0px;word-spacing:0px;}
                      div.rc {position:absolute;-ms-layout-flow:vertical-ideographic;writing-mode: vertical-lr;white-space:nowrap;}
                      div.rcc {position:absolute;-ms-layout-flow:	vertical-ideographic;writing-mode: vertical-rl;transform:rotate(180deg);white-space:nowrap;} 
                      div.t {position:absolute;white-space:nowrap;}&lt;/style&gt;
              &lt;/head&gt;
              &lt;body&gt;
                  &lt;xsl:attribute name="style"&gt;width:&lt;xsl:value-of	select="./wfocr:page/@width" /&gt;px; height:&lt;xsl:value-of	select="$currentHeight" /&gt;px; 
                      border: 1px solid black; background-repeat: no-repeat; font-family: 'Helvetica', 'Arial', sans-serif; padding: 0;
                  &lt;/xsl:attribute&gt;
                  &lt;document id="Standard"&gt;
                      &lt;xsl:copy-of select="./@*" /&gt;
                      &lt;main id="content"	style="position:absolute;top:0;left:0;width:calc(100% - 90px);height:100%;overflow-y:scroll"&gt;
                          &lt;xsl:apply-templates select="./wfocr:page" /&gt;
                      &lt;/main&gt;
                      &lt;aside id="minimap"	style="position:absolute;top:0;left:calc(100% - 90px);right:0;height:100%;border-left: solid 1px grey"&gt;&lt;/aside&gt;
                  &lt;/document&gt;
              &lt;/body&gt;
          &lt;/html&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:template match="wfocr:page"&gt;
          &lt;dl&gt;
              &lt;xsl:attribute name="data-section-title"&gt; &lt;/xsl:attribute&gt;
              &lt;xsl:attribute name="style"&gt;background-color:white;margin:0px;padding:0px;position:absolute;left:0px;top:0px;&lt;/xsl:attribute&gt;
              &lt;xsl:attribute name="class"&gt;minimap-section&lt;/xsl:attribute&gt;
              &lt;dt&gt; &lt;/dt&gt;
              &lt;dd&gt;
                  &lt;xsl:attribute name="style"&gt;position:absolute;left:0px;top:0px;&lt;/xsl:attribute&gt;
                  &lt;page&gt;
                      &lt;xsl:copy-of select="./@*" /&gt;

                      &lt;xsl:variable name="pageHeight"&gt;
                          &lt;xsl:value-of select="sum(preceding::*[@resolution]/@height)" /&gt;
                      &lt;/xsl:variable&gt;

                      &lt;xsl:variable name="previousPagesCount"&gt;
                          &lt;xsl:value-of select="count(preceding::*[@resolution])+1" /&gt;
                      &lt;/xsl:variable&gt;

                      &lt;xsl:attribute name="style"&gt;z-index:1;position:absolute; top:&lt;xsl:value-of select="$pageHeight"/&gt;px;weight:&lt;xsl:value-of select="@weight"/&gt;px;height:&lt;xsl:value-of select="@height"/&gt;px;&lt;/xsl:attribute&gt;
                      &lt;xsl:attribute name="data-pages"&gt;&lt;xsl:value-of select="$countPages"/&gt;&lt;/xsl:attribute&gt;
                      &lt;xsl:variable name="src"&gt;
                          &lt;xsl:value-of
                              select="concat('converted_pdf_link_PLACEHOLDER',$previousPagesCount,'.png')" /&gt;
                      &lt;/xsl:variable&gt;
                      &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;img src="&lt;/xsl:text&gt;
                      &lt;xsl:value-of select="$src"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;" style="&lt;/xsl:text&gt;
                      position:absolute;width:&lt;xsl:value-of select="@width"/&gt;px; height:1px; opacity:0; margin-left: 0px; margin-top: 0px;
                      &lt;xsl:text disable-output-escaping="yes"&gt;" &amp;gt;&amp;lt;/img&amp;gt;&lt;/xsl:text&gt;
                      &lt;xsl:apply-templates select="./wfocr:block"/&gt;
                  &lt;/page&gt;
              &lt;/dd&gt;
          &lt;/dl&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:template match="wfocr:block"&gt;
          &lt;xsl:choose&gt;
              &lt;xsl:when test="@blockType='Table'"&gt;
                &lt;block&gt;
                  &lt;table&gt;
                     &lt;tbody&gt;
                          &lt;xsl:apply-templates select="./wfocr:row" /&gt;
                     &lt;/tbody&gt;
                  &lt;/table&gt;
                &lt;/block&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when test="@blockType='Text'"&gt;
                  &lt;block&gt;
                      &lt;xsl:copy-of select="./@*" /&gt;
                      &lt;p&gt;
                          &lt;xsl:apply-templates select="./wfocr:text" /&gt;
                      &lt;/p&gt;
                  &lt;/block&gt;
              &lt;/xsl:when&gt;
          &lt;/xsl:choose&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:template match="wfocr:row"&gt;
          &lt;tr&gt;
              &lt;xsl:apply-templates select="./wfocr:cell" /&gt;
          &lt;/tr&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:template match="wfocr:cell"&gt;
          &lt;xsl:variable name="cellHeight"&gt;
              &lt;xsl:value-of select="@height" /&gt;
          &lt;/xsl:variable&gt;

          &lt;xsl:variable name="cellWidth"&gt;
              &lt;xsl:value-of select="@width" /&gt;
          &lt;/xsl:variable&gt;
          &lt;td&gt;
              &lt;xsl:attribute name="style"&gt;height:&lt;xsl:value-of select="$cellHeight"/&gt;px;width:&lt;xsl:value-of select="$cellWidth" /&gt;px;
              &lt;/xsl:attribute&gt;
              &lt;xsl:apply-templates select="./wfocr:text" /&gt;
          &lt;/td&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:template match="wfocr:text"&gt;
          &lt;text&gt;
              &lt;xsl:copy-of select="./@*" /&gt;
              &lt;xsl:apply-templates select="./wfocr:par" /&gt;
          &lt;/text&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:template match="wfocr:par"&gt;
          &lt;par&gt;
              &lt;xsl:copy-of select="./@*" /&gt;
              &lt;xsl:apply-templates select="./wfocr:line" /&gt;
          &lt;/par&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:template match="wfocr:line"&gt;
          &lt;line&gt;
              &lt;xsl:copy-of select="./@*" /&gt;

              &lt;xsl:variable name="lineTop"&gt;
                  &lt;xsl:value-of select="number(@t)" /&gt;
              &lt;/xsl:variable&gt;

              &lt;xsl:variable name="lineBottom"&gt;
                  &lt;xsl:value-of select="number(@b)" /&gt;
              &lt;/xsl:variable&gt;

              &lt;xsl:variable name="lineRight"&gt;
                  &lt;xsl:value-of select="number(@r)" /&gt;
              &lt;/xsl:variable&gt;

              &lt;xsl:variable name="lineLeft"&gt;
                  &lt;xsl:value-of select="number(@l)" /&gt;
              &lt;/xsl:variable&gt;

              &lt;xsl:variable name="rotatedFontHeight"&gt;
                  &lt;xsl:value-of select="number($lineRight - $lineLeft)" /&gt;
              &lt;/xsl:variable&gt;

              &lt;formatting&gt;
                  &lt;xsl:attribute name="style"&gt;position:absolute;width:&lt;xsl:value-of select="$rotatedFontHeight" /&gt;px;
                  top:&lt;xsl:value-of select="$lineTop" /&gt;px;margin-left:&lt;xsl:value-of select="$lineLeft" /&gt;px;
                  &lt;/xsl:attribute&gt;
                  &lt;xsl:copy-of select="./*"/&gt;
              &lt;/formatting&gt;
          &lt;/line&gt;

      &lt;/xsl:template&gt;
  &lt;/xsl:stylesheet&gt;
]]&gt;&lt;/template&gt;
			&lt;/stylesheet&gt;
		&lt;/xslt&gt;
	&lt;/var-def&gt;
	
	&lt;var-def name="htmlWordsDocument"&gt;
		&lt;script return="addImgTag(htmlWordsDocumentRaw.toString(), placeholder.toString(), imageLink.toString())"&gt;&lt;/script&gt;
	&lt;/var-def&gt;

	&lt;var-def name="ocr_standard_document_url"&gt;
		&lt;s3 bucket="${s3_bucket_name}"&gt;
			&lt;s3-put path="${document_uuid}/minimap.html" acl="PublicRead"
				content-type="text/html; charset=utf-8" content-disposition="inline"&gt;
				&lt;var name="htmlWordsDocument" /&gt;
			&lt;/s3-put&gt;
		&lt;/s3&gt;
	&lt;/var-def&gt;

	&lt;loop item="map" maxloops="1"&gt;
		&lt;list&gt;
			&lt;var name="ocr_result_list" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;script language="groovy"&gt;&lt;![CDATA[
				import com.google.gson.Gson;

				map.getWrappedObject().put("ocr_standard_document_url", ocr_standard_document_url.toString());
				map.getWrappedObject().put("ocr_standard_document_name", ocr_standard_document_url.toString().substring(ocr_standard_document_url.toString().lastIndexOf("/") + 1, ocr_standard_document_url.toString().lastIndexOf(".")));
				update_ocr_result_list.toList().add(new HashMap(map.getWrappedObject()));

				Gson gson = new Gson();
				String result_json = gson.toJson(update_ocr_result_list.toList());
				sys.defineVariable("ocr_json", result_json);
			]]&gt;&lt;/script&gt;
		&lt;/body&gt;
	&lt;/loop&gt;

	&lt;export include-original-data="true"&gt;
		&lt;single-column name="ocr_json" value="${ocr_json}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                <description>Inserts minimap</description>
                                <includedConfigs/>
                                <inclusionCode>2e1b4a7d-8162-4ec1-bce5-4818e233107b</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>[Standard] Minimap creation</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>2e1b4a7d-8162-4ec1-bce5-4818e233107b</uuid>
                                <version>
                                    <componentUuid>bc8943e6-5e77-4f2c-a0ea-4d6194e1b1a2</componentUuid>
                                    <incrementalVersion>1.2</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>833d4d4e-62ef-42bd-ad82-5105d5b984d4</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>[Standard] Minimap creation</title>
                            <type>SINGLE</type>
                            <uuid>30d3ed89-3a0c-4f8d-81ef-25eafde049c1</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>3f05f070-053c-4bf0-b36e-566f20f87840</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>f2e87a69-10b6-4bd6-8def-157da0d205b4</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to make request to the OCR api, with our input parameters , but before, get one OCR taskId for document and make valid OCR api URL.

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy"&gt;
  	  
  	&lt;var-def name="ocr_url"&gt;
  		&lt;var-global name="ocr_url"/&gt;
  	&lt;/var-def&gt;
  
    &lt;var-def name="ocr_username"&gt;
  		&lt;var-global name="ocr_username"/&gt;
  	&lt;/var-def&gt;
  
    &lt;var-def name="ocr_password"&gt;
  		&lt;var-global name="ocr_password"/&gt;
  	&lt;/var-def&gt;
  
  	&lt;var-def name="submitImage"&gt;
      	&lt;case&gt;
			&lt;if condition='${ocr_username.toString().isEmpty() || ocr_password.toString().isEmpty()}'&gt;
				&lt;http url="${ocr_url}/submitImage" method="post" multipart="true"&gt;
					&lt;http-param name="file" isfile="true"&gt;
						&lt;http url="${original_document_url}" /&gt;
					&lt;/http-param&gt;
				&lt;/http&gt;
			&lt;/if&gt;
          	&lt;else&gt;
            	&lt;http url="${ocr_url}/submitImage" method="post" multipart="true" username="${ocr_username.toString()}" password="${ocr_password.toString()}"&gt;
					&lt;http-param name="file" isfile="true"&gt;
						&lt;http url="${original_document_url}" /&gt;
					&lt;/http-param&gt;
				&lt;/http&gt;
          	&lt;/else&gt;
		&lt;/case&gt;
	&lt;/var-def&gt;
  	
	&lt;var-def name="taskId"&gt;
		&lt;xpath expression="string(//response/task/@id)"&gt;
			&lt;var name="submitImage" /&gt;
		&lt;/xpath&gt;
	&lt;/var-def&gt;
  
  	&lt;script&gt;&lt;![CDATA[
		//-------------------------------------------------------making processDocument url-------------------------------------------------------
		String url = ocr_url.toString() + "/processDocument?taskId=" + taskId.toString() + "&amp;exportFormat=" + no_cached_export_format.toString() + "&amp;textType=" + text_type.toString() + "&amp;language=" + document_language.toString() + "&amp;xml:writeRecognitionVariants=" + ocr_xml_char_recognition.toString() + "&amp;correctSkew=true&amp;correctOrientation=true&amp;allowedRegionTypes=" + allowed_region_types.toString() + "&amp;invertImage=" + invert_image.toString() + "&amp;discardColorImage=" + discard_color_image.toString() + "&amp;removeColorObjectsType=" + remove_color_objects_type.toString();
		StringBuilder process_document_url = new StringBuilder(url.toString());
		
		if( !custom_regions.toString().isEmpty()) {
			process_document_url.append("&amp;customRegions=" + custom_regions.toString());
		}

		if( !change_dpi.toString().isEmpty()) {
			process_document_url.append("&amp;changeDPI=" + change_dpi.toString());
		}

		if( !remove_color_objects.toString().isEmpty()) {
			process_document_url.append("&amp;removeColorObjects=" + remove_color_objects.toString());
		}
		sys.defineVariable("processDocumentUrl", process_document_url)
	]]&gt;&lt;/script&gt;
  	&lt;log level="INFO" message="process document url: + ${processDocumentUrl.toString()}"/&gt;
	&lt;var-def name="processDocument"&gt;
      	&lt;case&gt;
			&lt;if condition='${ocr_username.toString().isEmpty() || ocr_password.toString().isEmpty()}'&gt;
				&lt;http url="${processDocumentUrl.toString()}" method="get" /&gt;
			&lt;/if&gt;
          	&lt;else&gt;
            	&lt;http url="${processDocumentUrl.toString()}" method="get" username="${ocr_username.toString()}" password="${ocr_password.toString()}" /&gt;
          	&lt;/else&gt;
		&lt;/case&gt;
	&lt;/var-def&gt;
  
	&lt;export include-original-data="true"&gt;
		&lt;single-column name="ocr_task_id" value="${taskId}"/&gt;      
	&lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>5c2ebe5c-bf09-41a5-b938-00db1e57d0b4</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>[Standard] OCR</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>5c2ebe5c-bf09-41a5-b938-00db1e57d0b4</uuid>
                                <version>
                                    <componentUuid>c74a20c0-1e00-4efd-b136-291af4c5dce3</componentUuid>
                                    <incrementalVersion>1.7</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>87e428ea-ba60-4b0b-8f0d-572ac1d77361</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>[Standard] OCR</title>
                            <type>SINGLE</type>
                            <uuid>312882ff-9e2d-4be6-ad4a-6c699ab39a34</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>8e62ec40-787c-46aa-b8e9-545770043f0e</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>43c8f86a-889f-4fb2-81f0-2f97c7a7e540</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>true</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <description>OCR XML with variants to viewable XML</description>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to make XSLT XML Enrichment with WORD and DIV tags processing for "row processed documents" from previous step, to prepare them for valid view on the TOOD HT, also put updated documents on S3 and update OCR JSON.

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="java" charset="UTF-8"&gt;
  	
	&lt;script language="groovy"&gt;&lt;![CDATA[
		import groovy.json.JsonSlurper;

		List&lt;Map&gt; ocr_result_list = new JsonSlurper().parseText(ocr_json.toString());
		sys.defineVariable("ocr_result_list", ocr_result_list);

		List&lt;Map&gt; update_ocr_result_list = new ArrayList();
		sys.defineVariable("update_ocr_result_list", update_ocr_result_list);

		String ocr_document_name = ocr_result_list.get(0).get("ocr_document_name").toString();
		sys.defineVariable("ocr_document_name", ocr_document_name);

		String ocr_raw_processed_document_name = ocr_result_list.get(0).get("ocr_raw_processed_document_name").toString();
		sys.defineVariable("ocr_raw_processed_document_name", ocr_raw_processed_document_name);

		String ocr_document_format = ocr_result_list.get(0).get("ocr_document_format").toString();
		sys.defineVariable("ocr_document_format", ocr_document_format);
	]]&gt;&lt;/script&gt;
  
	&lt;var-def name="placeholder"&gt;
		&lt;template&gt;converted_pdf_link_PLACEHOLDER&lt;/template&gt;
	&lt;/var-def&gt;

  	&lt;var-def name="jsonKey"&gt;
		&lt;template&gt;fileList-1&lt;/template&gt;
	&lt;/var-def&gt;

    &lt;var-def name="lineHeight"&gt;
		&lt;template&gt;${use_line_height}&lt;/template&gt;
	&lt;/var-def&gt;  

  &lt;s3 bucket="${s3_bucket_name}"&gt;
		&lt;var-def name="xmlWordsDocument"&gt;
			&lt;s3-get name="${bp_run_id}/${document_uuid}/${ocr_raw_processed_document_name}.${ocr_document_format}" /&gt;
		&lt;/var-def&gt;
	&lt;/s3&gt;
  
	&lt;var-def name="imageLink"&gt;
		&lt;script return="getJSONValue(json_file_urls_for_manual.toString(), jsonKey.toString())"&gt;&lt;![CDATA[
			import org.json.XML;
			import java.util.List;
			import java.util.ArrayList;
			import org.json.JSONObject;
			import org.json.JSONArray;
			import com.freedomoss.workfusion.utils.gson.GsonUtils;


			static String getJSONValue(String jsonString, String key) {
				try{
					JSONObject json = new JSONObject(jsonString);
					return json.get(key).get("directUrl").toString();
				} catch (Exception e){
					return "";
				}
			}

			public static String addImgTag(String xml, String placeholder, String fileUrl){
				return xml.replace(placeholder, fileUrl.substring(0, fileUrl.length()-5)).replace("charset=UTF-8\"","charset=UTF-8\"/");
			}

		]]&gt;&lt;/script&gt;
	&lt;/var-def&gt;

&lt;!-- XSLT transformation
@date: 07/17/2018
@Author: Mikalai Yatskevich mikalai_yatskevich@epam.com
 v3
--&gt;
	&lt;var-def name="htmlWordsDocumentRaw"&gt;
		&lt;xslt&gt;
			&lt;xml&gt;
				&lt;var name="xmlWordsDocument" /&gt;
			&lt;/xml&gt;
			&lt;stylesheet&gt;&lt;template&gt;&lt;![CDATA[ 
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml"&gt;
    &lt;xsl:output method="html" omit-xml-declaration="yes" media-type="text/html" indent="no"/&gt;
    &lt;xsl:variable name="currentHeight"&gt;
        &lt;xsl:value-of select="sum(//page/@height)"/&gt;
    &lt;/xsl:variable&gt;
	&lt;xsl:variable name="countPages"&gt;
        &lt;xsl:value-of select="count(//wfocr:page)"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="isLineHeight"&gt;
        &lt;xsl:value-of select="true()"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="minimalFontHeight"&gt;
        &lt;xsl:value-of select="15"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="stopChars"&gt;
        &lt;xsl:value-of select='"&amp;apos;&amp;gt;&amp;lt;`&#8217;~!@#$%^\*()_-=+[]{}&#172;;:,./?|&#8220;&#174;&#171;&#187;&#8212;&#176;| "'/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="stopCharsFirstWordInLine"&gt;
        &lt;xsl:value-of select='"&amp;apos;&amp;gt;&amp;lt;`&#8217;~!@#$%^\/*()_-=+[]{}&#172;;:?|&#8220;&#174;&#171;&#187;&#8212;&#176;|"'/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="numberChars"&gt;
        &lt;xsl:value-of select="'-1234567890'"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="numberSeparators"&gt;
        &lt;xsl:value-of select="'., '"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="dateSeparators"&gt;
        &lt;xsl:value-of select="'./-'"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="space"&gt;
        &lt;xsl:value-of select="' '"/&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:template match="wfocr:document"&gt;
        &lt;html&gt;
            &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;!-- Version 1.7 --&amp;gt;&lt;/xsl:text&gt;
            &lt;head&gt;
                &lt;style type="text/css"&gt;div.n {position:absolute;white-space:nowrap;text-align:left;vertical-align:bottom;letter-spacing:0px;word-spacing:0px;} div.rc {position:absolute;-ms-layout-flow: vertical-ideographic;writing-mode: vertical-lr;white-space:nowrap;} div.rcc {position:absolute;-ms-layout-flow: vertical-ideographic;writing-mode: vertical-rl;transform: rotate(180deg);white-space:nowrap;} div.t {position:absolute;white-space:nowrap;}&lt;/style&gt;
            &lt;/head&gt;
            &lt;body&gt;
                &lt;xsl:attribute name="style"&gt;width:&lt;xsl:value-of select="./page/@width"/&gt;px; height:&lt;xsl:value-of select="$currentHeight"/&gt;px; border: 1px solid black; background-repeat: no-repeat; font-family: 'Helvetica', 'Arial', sans-serif; padding: 0;
                &lt;/xsl:attribute&gt;
                &lt;document id="TOOD"&gt;
                    &lt;xsl:copy-of select="./@*"/&gt;
                    &lt;xsl:apply-templates select="./wfocr:page"/&gt;
                &lt;/document&gt;
            &lt;/body&gt;
        &lt;/html&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:page"&gt;
        &lt;page&gt;
            &lt;xsl:copy-of select="./@*"/&gt;
            &lt;xsl:attribute name="data-pages"&gt;&lt;xsl:value-of select="$countPages"/&gt;&lt;/xsl:attribute&gt;
            &lt;xsl:variable name="pageHeight"&gt;
                &lt;xsl:value-of select="sum(preceding::*[@resolution]/@height)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="previousPagesCount"&gt;
                &lt;xsl:value-of select="count(preceding::*[@resolution])+1"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="src"&gt;
                &lt;xsl:value-of select="concat('converted_pdf_link_PLACEHOLDER',$previousPagesCount,'.png')"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;img src="&lt;/xsl:text&gt;
            &lt;xsl:value-of select="$src"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;" style="&lt;/xsl:text&gt;position:absolute;top:&lt;xsl:value-of select="$pageHeight"/&gt;px;width:&lt;xsl:value-of select="@width"/&gt;px; height:&lt;xsl:value-of select="@height"/&gt;px; opacity:0.1; margin-left: 0px; margin-top: 0px;
            &lt;xsl:text disable-output-escaping="yes"&gt;" &amp;gt;&amp;lt;/img&amp;gt;&lt;/xsl:text&gt;
            &lt;xsl:apply-templates select="./wfocr:block"/&gt;
        &lt;/page&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:block"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="@blockType='Table'"&gt;
                &lt;table&gt;
                    &lt;tbody&gt;
                        &lt;xsl:apply-templates select="./wfocr:row"/&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="@blockType='Text'"&gt;
                &lt;block&gt;
                    &lt;xsl:copy-of select="./@*"/&gt;
                    &lt;p&gt;
                        &lt;xsl:apply-templates select="./wfocr:text"/&gt;
                    &lt;/p&gt;
                &lt;/block&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
        &lt;xsl:copy-of select="./separator"/&gt;
        &lt;xsl:copy-of select="./region"/&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="wfocr:row"&gt;

        &lt;tr&gt;
            &lt;xsl:apply-templates select="./wfocr:cell"/&gt;
        &lt;/tr&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="wfocr:cell"&gt;

        &lt;xsl:variable name="cellHeight"&gt;
            &lt;xsl:value-of select="@height"/&gt;
        &lt;/xsl:variable&gt;

        &lt;xsl:variable name="cellWidth"&gt;
            &lt;xsl:value-of select="@width"/&gt;
        &lt;/xsl:variable&gt;
        &lt;td&gt;
            &lt;xsl:attribute name="style"&gt;height:&lt;xsl:value-of select="$cellHeight"/&gt;px;width:&lt;xsl:value-of select="$cellWidth"/&gt;px;
            &lt;/xsl:attribute&gt;
            &lt;xsl:apply-templates select="./wfocr:text"/&gt;
        &lt;/td&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:text"&gt;
        &lt;text&gt;
            &lt;xsl:copy-of select="./@*"/&gt;
            &lt;xsl:apply-templates select="./wfocr:par"/&gt;
        &lt;/text&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:par"&gt;
        &lt;par&gt;
            &lt;xsl:copy-of select="./@*"/&gt;

            &lt;xsl:apply-templates select="./wfocr:line"/&gt;
        &lt;/par&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="wfocr:line"&gt;

        &lt;line&gt;
            &lt;xsl:copy-of select="./@*"/&gt;

            &lt;xsl:variable name="pageHeight"&gt;
                &lt;xsl:value-of select="number(sum(preceding::*[@resolution]/@height))"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineId"&gt;
                &lt;xsl:value-of select="generate-id(.)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineTop"&gt;
                &lt;xsl:value-of select="number(@t)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineBottom"&gt;
                &lt;xsl:value-of select="number(@b)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineRight"&gt;
                &lt;xsl:value-of select="number(@r)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineLeft"&gt;
                &lt;xsl:value-of select="number(@l)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineFirstCharacterLeft"&gt;
                &lt;xsl:value-of select="number(descendant::wfocr:charParams[@l][1]/@l)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="rotatedFontHeight"&gt;
                &lt;xsl:value-of select="number($lineRight - $lineLeft)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineHeightOld"&gt;
                &lt;xsl:value-of select="number($lineBottom - $lineTop)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="charBottoms"&gt;
                &lt;xsl:value-of select="number(sum(descendant::wfocr:charParams[string-length(normalize-space(text()))&gt;0]/@b))"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="charTops"&gt;
                &lt;xsl:value-of select="number(sum(descendant::wfocr:charParams[string-length(normalize-space(text()))&gt;0]/@t))"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="countElements"&gt;
                &lt;xsl:value-of select="number(count(descendant::wfocr:charParams[@b]))"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="middle"&gt;
                &lt;xsl:value-of select="ceiling($countElements div 2)"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="even"&gt;
                &lt;xsl:value-of select="not($countElements mod 2)"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="chosenElement"&gt;
                &lt;xsl:value-of select="count(descendant::wfocr:charParams[@b][@t]) div 10+1"/&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="lineHeightChar"&gt;
                &lt;xsl:for-each select="descendant::wfocr:charParams[@b][@t]"&gt;
                    &lt;xsl:sort data-type="number" select="string(number(./@b)-number(./@t))" order="descending"/&gt;
                    &lt;xsl:if test="position() = $middle"&gt;
                        &lt;xsl:value-of select="number(./@b)-number(./@t)"/&gt;
                    &lt;/xsl:if&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="totalCharHeight"&gt;
                &lt;xsl:value-of select="number($charBottoms)-number($charTops)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="charCount"&gt;
                &lt;xsl:value-of select="number(count(descendant::wfocr:charParams[string-length(normalize-space(text()))&gt;0]))"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineHeightComputed"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="number($lineHeightOld) div 2 &amp;gt; number($lineHeightChar)"&gt;
                        &lt;xsl:value-of select="number($lineHeightChar)"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="number($lineHeightOld)"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="lineHeight"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$isLineHeight"&gt;
                        &lt;xsl:value-of select="$lineHeightOld"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="number($lineHeightComputed) &amp;lt; number($minimalFontHeight)"&gt;
                                &lt;xsl:value-of select="number($minimalFontHeight)"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:value-of select="number($lineHeightComputed)"/&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="fontHeight"&gt;
                &lt;xsl:value-of select="number($lineHeight)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="rotatedLineHeight"&gt;
                &lt;xsl:value-of select="number($lineRight) - number($lineLeft)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineRightValue"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="normalize-space(descendant::wfocr:charParams[not(@charConfidence)][1]/@r)!=NaN"&gt;
                        &lt;xsl:value-of select="number(descendant::wfocr:charParams[not(@charConfidence)][1]/@r)"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="number($lineRight)"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="lineWidth"&gt;
                &lt;xsl:value-of select="number($lineRightValue) - number(@l)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;xsl:variable name="orientation"&gt;
                &lt;xsl:value-of disable-output-escaping="yes" select="normalize-space(ancestor::wfocr:text[@orientation]/@orientation)"/&gt;
            &lt;/xsl:variable&gt;

            &lt;formatting&gt;
                &lt;xsl:copy-of select="./@*"/&gt;

                &lt;xsl:variable name="sumConfidence"&gt;
                    &lt;xsl:value-of select="number(sum(descendant::wfocr:charParams[@charConfidence]/@charConfidence))"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="numNodes"&gt;
                    &lt;xsl:value-of select="number(count(descendant::wfocr:charParams[@charConfidence]/@charConfidence))"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="charConfidence"&gt;
                    &lt;xsl:value-of select="number($sumConfidence div $numNodes)"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="firstCharInLine"&gt;
                    &lt;xsl:value-of select="normalize-space(descendant::wfocr:charParams[1]/text())"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="secondCharInLine"&gt;
                    &lt;xsl:value-of select="normalize-space(descendant::wfocr:charParams[2]/text())"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="preFirstSymbolLeft"&gt;
                    &lt;xsl:value-of select="descendant::wfocr:charParams[not(contains($numberSeparators,normalize-space(self::*/text()))) and
                    not(contains($dateSeparators,normalize-space(self::*/text()))) and
                    not(contains($numberChars,normalize-space(self::*/text()))) and
                    string-length(normalize-space(self::*/text())) &amp;gt; 0][1]/@l[1]"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="firstSymbolLeft"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="string-length($preFirstSymbolLeft) &amp;gt; 0"&gt;
                            &lt;xsl:value-of select="number($preFirstSymbolLeft)"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of select="0"/&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="preFirstSpaceLeft"&gt;
                    &lt;xsl:value-of select="normalize-space(descendant::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="firstSpaceLeft"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="string-length($preFirstSpaceLeft) &amp;gt; 0"&gt;
                            &lt;xsl:value-of select="number($preFirstSpaceLeft)"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of select="0"/&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="preFirstStopCharLeft"&gt;
                    &lt;xsl:value-of select="normalize-space(descendant::wfocr:charParams[contains($stopCharsFirstWordInLine,normalize-space(self::*/text()))][1]/@l[1])"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="firstStopCharLeft"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="string-length($preFirstStopCharLeft) &amp;gt; 0"&gt;
                            &lt;xsl:value-of select="$preFirstStopCharLeft"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of select="0"/&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="string-length(normalize-space($orientation))=0"&gt;
                        &lt;xsl:variable name="followingSpaceFirstWordInLine"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="string-length($preFirstSymbolLeft) = 0"&gt;
                                    &lt;xsl:value-of select="$lineRightValue"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="((string-length(normalize-space(descendant::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])) &amp;gt; 0) and
                                (not(contains($numberChars, $firstCharInLine))))"&gt;
                                            &lt;xsl:value-of select="$firstSpaceLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="contains($numberChars, $firstCharInLine) and ($firstSpaceLeft &amp;gt; $firstSymbolLeft)"&gt;
                                            &lt;xsl:value-of select="$firstSpaceLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="contains($numberChars, $firstCharInLine) and ($firstSpaceLeft &amp;lt; $firstSymbolLeft)"&gt;
                                            &lt;xsl:value-of select="$firstSymbolLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$lineRightValue"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="followingStopCharFirstWordInLine"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="string-length($preFirstSymbolLeft) = 0"&gt;
                                    &lt;xsl:value-of select="$lineRightValue"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="(string-length(normalize-space(descendant::wfocr:charParams[contains($stopCharsFirstWordInLine,normalize-space(self::*/text()))][1]/@l[1])) &amp;gt; 0) and
                                (not(contains($numberChars, $firstCharInLine)))"&gt;
                                            &lt;xsl:value-of select="$firstStopCharLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="contains($numberChars, $firstCharInLine) and ($firstStopCharLeft &amp;gt; $firstSymbolLeft)"&gt;
                                            &lt;xsl:value-of select="$firstStopCharLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="contains($numberChars, $firstCharInLine) and ($firstStopCharLeft &amp;lt; $firstSymbolLeft)"&gt;
                                            &lt;xsl:value-of select="$firstSymbolLeft"/&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$lineRightValue"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="rightFirstWordInLine"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="number($followingSpaceFirstWordInLine) &amp;lt; number($followingStopCharFirstWordInLine)"&gt;
                                    &lt;xsl:value-of select="number($followingSpaceFirstWordInLine)"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="number($followingStopCharFirstWordInLine)"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="leftFirstWordInLine"&gt;
                            &lt;xsl:value-of select="$lineLeft"/&gt;
                        &lt;/xsl:variable&gt;

                        &lt;xsl:variable name="widthFirstWordInLine"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="string-length(normalize-space($rightFirstWordInLine))=0"&gt;
                                    &lt;xsl:value-of select="number($lineRight)-number($leftFirstWordInLine)"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="number($rightFirstWordInLine)-number($leftFirstWordInLine)"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:variable&gt;

                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)+number($lineHeight)"/&gt;" l="&lt;xsl:value-of select="number($lineFirstCharacterLeft)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                        &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineFirstCharacterLeft)"/&gt;px; width:&lt;xsl:value-of select="number($widthFirstWordInLine)"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;"&lt;xsl:text disable-output-escaping="yes"&gt; class="n"&amp;gt;&lt;/xsl:text&gt;
                        &lt;xsl:for-each select="descendant::wfocr:charParams"&gt;
                            &lt;xsl:variable name="charValue"&gt;
                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="rightCharValueThatCanBeEmpty"&gt;
                                &lt;xsl:value-of select="normalize-space(./following::wfocr:charParams[1]/text()[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingTagId"&gt;
                                &lt;xsl:value-of select="generate-id(./following::wfocr:*[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingCharParamsTagId"&gt;
                                &lt;xsl:value-of select="generate-id(./following::wfocr:charParams[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="precedingTagId"&gt;
                                &lt;xsl:value-of select="generate-id(./preceding::wfocr:*[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="precedingCharParamsTagId"&gt;
                                &lt;xsl:value-of select="generate-id(./preceding-sibling::wfocr:charParams[1])"/&gt;
                            &lt;/xsl:variable&gt;

                            &lt;xsl:variable name="isLastCharInLine"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="($followingTagId &amp;lt; $followingCharParamsTagId) or ($followingTagId &amp;gt; $followingCharParamsTagId)"&gt;
                                        &lt;xsl:value-of select="true()"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="false()"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isFirstCharInLineNew"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="($precedingTagId &amp;lt; $precedingCharParamsTagId) or ($precedingTagId &amp;gt; $precedingCharParamsTagId)"&gt;
                                        &lt;xsl:value-of select="true()"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="false()"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="rightCharValue"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($rightCharValueThatCanBeEmpty)&gt;0"&gt;
                                        &lt;xsl:value-of select="$rightCharValueThatCanBeEmpty"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="'1'"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingNumberChar"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][contains($numberChars,normalize-space(self::*/text()))][1]/@l[1])) &amp;gt; 0"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][contains($numberChars,normalize-space(self::*/text()))][1]/@l[1]))"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingLetter"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][not(contains($numberChars,normalize-space(self::*/text()))) and not(contains($stopChars,normalize-space(self::*/text())))][1]/@l[1])) &amp;gt; 0"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][not(contains($numberChars,normalize-space(self::*/text()))) and not(contains($stopChars,normalize-space(self::*/text())))][1]/@l[1]))"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isNumberChar"&gt;
                                &lt;xsl:value-of select="contains($numberChars,$charValue)"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isLetterChar"&gt;
                                &lt;xsl:value-of select="not(contains($numberChars,$charValue)) and not(contains($stopChars,$charValue))"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isRightNumberChar"&gt;
                                &lt;xsl:choose&gt;
                                &lt;xsl:when test="string-length($rightCharValueThatCanBeEmpty)&gt;0"&gt;
                                &lt;xsl:value-of select="contains($numberChars,$rightCharValue)"/&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="false()"/&gt;
                                &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isRightLetterChar"&gt;
                                &lt;xsl:value-of select="not(contains($numberChars,$rightCharValue)) and not(contains($stopChars,$rightCharValue))"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingNumberLetterFirst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$isNumberChar"&gt;
                                        &lt;xsl:value-of select="$followingLetter"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$isLetterChar"&gt;
                                        &lt;xsl:value-of select="$followingNumberChar"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;


                            &lt;xsl:variable name="preFstSymbolLeft"&gt;
                                &lt;xsl:value-of select="following::wfocr:charParams[not(contains($numberSeparators,normalize-space(self::*/text()))) and
                    (not(contains($numberChars, $charValue)) or (contains($numberChars, $charValue) and  not(contains($dateSeparators,normalize-space(self::*/text()))))) and
                    not(contains($numberChars,normalize-space(self::*/text()))) and
                    string-length(normalize-space(self::*/text())) &amp;gt; 0][1]/@l[1]"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="fstSymbolLeft"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstSymbolLeft) &amp;gt; 0"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($preFstSymbolLeft) &amp;gt; number(./@l[1])"&gt;
                                                &lt;xsl:value-of select="number($preFstSymbolLeft)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="preFstSpaceLeft"&gt;
                                &lt;xsl:value-of select="normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="fstSpaceLeft"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstSpaceLeft) &amp;gt; 0"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($preFstSpaceLeft) &amp;gt; number(./@l[1])"&gt;
                                                &lt;xsl:choose&gt;
                                                    &lt;xsl:when test="number($preFstSpaceLeft) &amp;lt; number($fstSymbolLeft)"&gt;
                                                        &lt;xsl:value-of select="number($fstSymbolLeft)"/&gt;
                                                    &lt;/xsl:when&gt;
                                                    &lt;xsl:otherwise&gt;
                                                        &lt;xsl:value-of select="number($preFstSpaceLeft)"/&gt;
                                                    &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="preFstStopCharLeft"&gt;
                                &lt;xsl:value-of select="normalize-space(following::wfocr:charParams[contains($stopCharsFirstWordInLine,normalize-space(self::*/text()))][1]/@l[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="fstStopCharLeft"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstStopCharLeft) &amp;gt; 0"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($preFstStopCharLeft) &amp;gt; number(./@l[1])"&gt;
                                                &lt;xsl:value-of select="$preFstStopCharLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;


                            &lt;xsl:variable name="followingSpaceFst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstSymbolLeft) = 0"&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="(string-length(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1])) &amp;gt; 0) and (not(contains($numberChars, $rightCharValue))) and (not(contains($numberSeparators, $rightCharValue))) and (not(contains($dateSeparators, $rightCharValue)))"&gt;
                                                &lt;xsl:value-of select="number(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1]))"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="contains($numberChars, $rightCharValue) and ($fstSpaceLeft &amp;gt; $fstSymbolLeft)"&gt;
                                                &lt;xsl:value-of select="$fstSpaceLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="contains($numberChars, $rightCharValue) and ($fstSpaceLeft &amp;lt;= $fstSymbolLeft)"&gt;
                                                &lt;xsl:value-of select="$fstSymbolLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingStopCharFst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($preFstSymbolLeft) = 0"&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="(string-length(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][1]/@l[1])) &amp;gt; 0) and (not(contains($numberChars, $rightCharValue))) and (not(contains($numberSeparators, $rightCharValue))) and (not(contains($dateSeparators, $rightCharValue)))"&gt;
                                                &lt;xsl:value-of select="number(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][1]/@l[1]))"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="contains($numberChars, $rightCharValue) and ($fstSpaceLeft &amp;gt; $fstSymbolLeft)"&gt;
                                                &lt;xsl:value-of select="$fstSpaceLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="contains($numberChars, $rightCharValue) and ($fstSpaceLeft &amp;lt;= $fstSymbolLeft)"&gt;
                                                &lt;xsl:value-of select="$fstSymbolLeft"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingSpaceFirst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="(string-length(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])) &amp;gt; 0) and (not(contains($numberChars, $rightCharValue))) "&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="not
                                            ((number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1])) &amp;lt; $lineRightValue) and
                                            ((number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@t[1]))) &amp;gt; number(./@b)))"&gt;
                                                &lt;xsl:value-of select="number(normalize-space(following::wfocr:charParams[not(self::*[@charConfidence])][1]/@l[1]))"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineRightValue"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingStopCharFirst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="(string-length(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][not(contains($dateSeparators,normalize-space(self::*/text())))][1]/@l[1])) &amp;gt; 0)"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][not(contains($dateSeparators,normalize-space(self::*/text())))][1]/@l[1]))"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="$lineRightValue"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="right"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="(number($followingSpaceFst) &amp;lt;= number($followingStopCharFst)) and (number($followingSpaceFst) &amp;lt;= number($followingNumberLetterFirst))"&gt;
                                        &lt;xsl:value-of select="number($followingSpaceFst)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="(number($followingStopCharFst) &amp;lt;= number($followingSpaceFst)) and (number($followingStopCharFst) &amp;lt;= number($followingNumberLetterFirst))"&gt;
                                        &lt;xsl:value-of select="$followingStopCharFst"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="(number($followingNumberLetterFirst) &amp;lt;= number($followingSpaceFst)) and (number($followingNumberLetterFirst) &amp;lt;= number($followingStopCharFst))"&gt;
                                        &lt;xsl:value-of select="$followingNumberLetterFirst"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="number($followingStopCharFst)"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="rightFst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="number($followingSpaceFirst) &amp;lt; number($followingStopCharFst)"&gt;
                                        &lt;xsl:value-of select="number($followingSpaceFirst)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="number($followingStopCharFst)"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isTab"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space(./@isTab)) &amp;gt; 0"&gt;
                                        &lt;xsl:value-of select="number(./@isTab)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="left"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$isTab = 0"&gt;
                                        &lt;xsl:value-of select="number(./@r[1])"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="number(following-sibling::wfocr:charParams[not(self::*[@isTab])][1]/@r[1])"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;

                            &lt;xsl:variable name="width"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space($right))=0"&gt;
                                        &lt;xsl:value-of select="number($lineRight)-number($left)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="number($right)-number($left)"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="widthFst"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length(normalize-space($rightFst))=0"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($lineRight)-number($left) &amp;gt; 1"&gt;
                                                &lt;xsl:value-of select="number($lineRight)-number($left)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$width"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="number($rightFst)-number($left) &amp;gt; 0"&gt;
                                                &lt;xsl:value-of select="number($rightFst)-number($left)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$width"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isFirstCharInLine"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="number($lineFirstCharacterLeft) = number(./@l[1])"&gt;
                                        &lt;xsl:value-of select="1"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="0"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="leftCharValueThatCanBeEmpty"&gt;
                                &lt;xsl:value-of select="normalize-space(./preceding::wfocr:charParams[1]/text()[1])"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="leftCharValue"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($leftCharValueThatCanBeEmpty)&gt;0"&gt;
                                        &lt;xsl:value-of select="$leftCharValueThatCanBeEmpty"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="'1'"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isLeftCharNumber"&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="string-length($leftCharValueThatCanBeEmpty)&gt;0"&gt;
                                        &lt;xsl:value-of select="contains($numberChars,$leftCharValue)"/&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:value-of select="false()"/&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="isLeftLetterChar"&gt;
                                &lt;xsl:value-of select="not(contains($numberChars,$leftCharValue)) and not(contains($stopChars,$leftCharValue))"/&gt;
                            &lt;/xsl:variable&gt;

                            &lt;xsl:variable name="charRight"&gt;
                                &lt;xsl:value-of select="./following-sibling::wfocr:charParams[1]/@l[1]"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="charLength"&gt;
                                &lt;xsl:value-of select="string-length(normalize-space($charValue))"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="textValue"&gt;
                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:variable name="followingSibling"&gt;
                                &lt;xsl:value-of select="normalize-space(following-sibling::wfocr:charParams[1]/text()[1])"/&gt;
                            &lt;/xsl:variable&gt;

                                                        &lt;xsl:choose&gt;
                                                            &lt;xsl:when test="((((not($charValue) or contains($stopChars, $charValue)) ) or
                                                        (contains($isLetterChar,'true') and contains($isLeftCharNumber, 'true') and contains($isFirstCharInLineNew, 'false')) or (contains($isNumberChar,'true') and contains($isLeftLetterChar,'true') and contains($isFirstCharInLineNew, 'false') ) or
                                                            (contains($numberChars, $leftCharValue) and not(contains($numberChars, $charValue)) and contains($numberChars, $rightCharValue) and not(contains($stopChars, $charValue)) and not($isFirstCharInLine='1'))) ) and
                                                        (($charLength &amp;gt; 0 and not(contains($numberSeparators, $charValue))) or
                                                        ($charLength=0 and not(contains($numberChars, $leftCharValue) and contains($numberChars, $rightCharValue))) or
                                                        (($charLength &amp;gt; 0) and not(contains($numberSeparators, $charValue) and contains($numberChars, $leftCharValue) and contains($numberChars, $rightCharValue)))) and
                                                        (($charLength &amp;gt; 0 and not(contains($dateSeparators, $charValue))) or
                                                        ($charLength=0 and not(contains($numberChars, $leftCharValue) and contains($numberChars, $rightCharValue))) or
                                                        (($charLength &amp;gt; 0) and not(contains($dateSeparators, $charValue) and contains($numberChars, $leftCharValue) and contains($numberChars, $rightCharValue))))"&gt;

                                                                &lt;xsl:variable name="followingSpace"&gt;
                                                                    &lt;xsl:choose&gt;
                                                                        &lt;xsl:when test="string-length(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1])) &amp;gt; 0"&gt;
                                                                            &lt;xsl:value-of select="number(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1]))"/&gt;
                                                                        &lt;/xsl:when&gt;
                                                                        &lt;xsl:otherwise&gt;
                                                                            &lt;xsl:value-of select="$lineRightValue"/&gt;
                                                                        &lt;/xsl:otherwise&gt;
                                                                    &lt;/xsl:choose&gt;
                                                                &lt;/xsl:variable&gt;
                                                                &lt;xsl:variable name="followingStopChar"&gt;
                                                                    &lt;xsl:choose&gt;
                                                                        &lt;xsl:when test="string-length(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][1]/@l[1])) &amp;gt; 0"&gt;
                                                                            &lt;xsl:value-of select="number(normalize-space(following-sibling::wfocr:charParams[contains($stopChars,normalize-space(self::*/text()))][1]/@l[1]))"/&gt;
                                                                        &lt;/xsl:when&gt;
                                                                        &lt;xsl:otherwise&gt;
                                                                            &lt;xsl:value-of select="$lineRightValue"/&gt;
                                                                        &lt;/xsl:otherwise&gt;
                                                                    &lt;/xsl:choose&gt;
                                                                &lt;/xsl:variable&gt;
                                                                &lt;xsl:if test="number($width) &amp;gt; -1"&gt;
                                                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;
                                                                    &lt;xsl:if test="(string-length(normalize-space($charValue)) &amp;gt; 0)"&gt;

                                                                        &lt;word&gt;
                                                                            &lt;xsl:attribute name="t"&gt;
                                                                                &lt;xsl:value-of select="number(./@t[1])"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;xsl:attribute name="b"&gt;
                                                                                &lt;xsl:value-of select="number(./@b[1])"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;xsl:attribute name="l"&gt;
                                                                                &lt;xsl:value-of select="number(./@l[1])"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;xsl:attribute name="r"&gt;
                                                                                &lt;xsl:value-of select="number(./@r[1])"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;xsl:attribute name="isTab"&gt;
                                                                                &lt;xsl:value-of select="'1'"/&gt;
                                                                            &lt;/xsl:attribute&gt;
                                                                            &lt;div&gt;
                                                                                &lt;xsl:attribute name="style"&gt;top:&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number(./@l[1])"/&gt;px; width:&lt;xsl:value-of select="number(./@r[1])-number(./@l[1])"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;&lt;/xsl:attribute&gt;
                                                                                &lt;xsl:attribute name="class"&gt;n&lt;/xsl:attribute&gt;
                                                                                &lt;xsl:if test="not(contains($isLetterChar, 'true')) and not(contains($isNumberChar, 'true'))"&gt;
                                                                                    &lt;xsl:value-of select="./text()"/&gt;
                                                                                &lt;/xsl:if&gt;
                                                                            &lt;/div&gt;
                                                                        &lt;/word&gt;
                                                                    &lt;/xsl:if&gt;
                                                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)+number($lineHeight)"/&gt;" r="&lt;xsl:value-of select="number(./@r)+number($width)"/&gt;" l="&lt;xsl:value-of select="$left"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                                                                    &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($lineTop+$pageHeight)"/&gt;px;left:&lt;xsl:value-of select="$left"/&gt;px; width:&lt;xsl:value-of select="number($widthFst)"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;" &lt;xsl:text disable-output-escaping="yes"&gt; class="n"&amp;gt;&lt;/xsl:text&gt;
                                                                    &lt;xsl:if test="contains($isLetterChar, 'true') or contains($isNumberChar, 'true')"&gt;
                                                                        &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                                                    &lt;/xsl:if&gt;
                                                                &lt;/xsl:if&gt;
                                                            &lt;/xsl:when&gt;
                                                            &lt;xsl:otherwise&gt;
                                                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                                            &lt;/xsl:otherwise&gt;
                                                        &lt;/xsl:choose&gt;
                                                        &lt;!--                            &lt;/xsl:if&gt;--&gt;
                        &lt;/xsl:for-each&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$orientation='RotatedClockwise'"&gt;
                        &lt;xsl:variable name="startBottom"&gt;
                            &lt;xsl:value-of select="number(descendant::*[not(self::*[@charConfidence])][1]/@t)"/&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="startTop"&gt;
                            &lt;xsl:value-of select="number(descendant::*[1]/@t)"/&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="startHeight"&gt;
                            &lt;xsl:value-of select="number($startBottom)-number($startTop)"/&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($startTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($pageHeight)+number($startBottom)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                        &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($startTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($startHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;"&lt;xsl:text disable-output-escaping="yes"&gt;class="rc"&amp;gt;&lt;/xsl:text&gt;
                        &lt;xsl:for-each select="descendant::wfocr:charParams"&gt;
                            &lt;xsl:variable name="charValue"&gt;
                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                            &lt;/xsl:variable&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="not($charValue) or contains($stopChars, $charValue)"&gt;

                                    &lt;xsl:variable name="followingSpace"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::*[not(self::wfocr:charParams[@charConfidence])][1]/@b))"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="followingStopChar"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::*[contains($stopChars,normalize-space(self::wfocr:charParams/text()))][1]/@b))"/&gt;
                                    &lt;/xsl:variable&gt;

                                    &lt;xsl:variable name="top"&gt;
                                        &lt;xsl:value-of select="number(./@b)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="bottom"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0) and (string-length($followingStopChar)=0) and string-length(normalize-space(following-sibling::wfocr:charParams[last()]/@b))=0"&gt;
                                                &lt;xsl:value-of select="$lineBottom"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0) and (string-length($followingStopChar)=0)"&gt;
                                                &lt;xsl:value-of select="normalize-space(following-sibling::wfocr:charParams[last()]/@b)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingStopChar)=0)"&gt;
                                                &lt;xsl:value-of select="$followingSpace"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0)"&gt;
                                                &lt;xsl:value-of select="$followingStopChar"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="number($followingSpace) &amp;lt; number($followingStopChar)"&gt;
                                                &lt;xsl:value-of select="$followingSpace"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="number($followingSpace) &amp;gt; number($followingStopChar)"&gt;
                                                &lt;xsl:value-of select="$followingStopChar"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="$lineBottom"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:variable&gt;

                                    &lt;xsl:variable name="height"&gt;
                                        &lt;xsl:value-of select="number($bottom)-number($top)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;

                                    &lt;word&gt;
                                        &lt;xsl:attribute name="t"&gt;
                                            &lt;xsl:value-of select="number(./@t)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="b"&gt;
                                            &lt;xsl:value-of select="number(./@b)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="l"&gt;
                                            &lt;xsl:value-of select="number(./@l)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="r"&gt;
                                            &lt;xsl:value-of select="number(./@r)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="isTab"&gt;
                                            &lt;xsl:value-of select="'1'"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;div&gt;
                                            &lt;xsl:attribute name="style"&gt;top:&lt;xsl:value-of select="number(./@t)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number(./@l)"/&gt;px; width:&lt;xsl:value-of select="number(./@r)-number(./@l)"/&gt;px; height:&lt;xsl:value-of select="number(./@b)-number(./@t)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;
                                            &lt;/xsl:attribute&gt;
                                            &lt;xsl:attribute name="class"&gt;rc&lt;/xsl:attribute&gt;
                                            &lt;xsl:value-of select="$charValue"/&gt;
                                        &lt;/div&gt;
                                    &lt;/word&gt;

                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($top)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($top)+number($pageHeight)+number($height)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                                    &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div onload="divSize(this)" style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($top)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($height)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;"
                                    &lt;xsl:text disable-output-escaping="yes"&gt; class="rc"&amp;gt;&lt;/xsl:text&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;

                        &lt;/xsl:for-each&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;

                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$orientation='RotatedCounterclockwise'"&gt;
                        &lt;xsl:variable name="startBottom"&gt;
                            &lt;xsl:value-of select="number(@b)"/&gt;
                        &lt;/xsl:variable&gt;
                        &lt;xsl:variable name="startTop"&gt;
                            &lt;xsl:value-of select="number(descendant::wfocr:charParams[1]/@b)"/&gt;
                        &lt;/xsl:variable&gt;

                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($startTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($pageHeight)+number($startBottom)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                        &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($startTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($startBottom)-number($startTop)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;"
                        &lt;xsl:text disable-output-escaping="yes"&gt;class="rcc"&amp;gt;&lt;/xsl:text&gt;
                        &lt;xsl:for-each select="descendant::wfocr:charParams"&gt;
                            &lt;xsl:variable name="charValue"&gt;
                                &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                            &lt;/xsl:variable&gt;

                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="not($charValue)or contains($stopChars, $charValue)"&gt;
                                    &lt;xsl:variable name="followingSpace"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::*[not(self::*[@charConfidence])][1]/@t[1]))"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="followingStopChar"&gt;
                                        &lt;xsl:value-of select="number(normalize-space(following-sibling::*[contains($stopChars,normalize-space(self::*/text()))][1]/@t[1]))"/&gt;
                                    &lt;/xsl:variable&gt;

                                    &lt;xsl:variable name="top"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0) and (string-length($followingStopChar)=0) and (string-length(normalize-space(following-sibling::*[last()]/@t[1]))&gt;0)"&gt;
                                                &lt;xsl:value-of select="normalize-space(following-sibling::*[last()][@t]/@t[1])"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingStopChar)=0) and (string-length($followingSpace)&gt;0)"&gt;
                                                &lt;xsl:value-of select="$followingSpace"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)=0) and (string-length($followingStopChar)&gt;0)"&gt;
                                                &lt;xsl:value-of select="$followingStopChar"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="(string-length($followingSpace)&gt;0) and ($followingSpace &amp;lt; $followingStopChar)"&gt;
                                                &lt;xsl:value-of select="$followingSpace"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:when test="string-length($followingStopChar)&gt;0"&gt;
                                                &lt;xsl:value-of select="$followingStopChar"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="0"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:variable&gt;

                                    &lt;xsl:variable name="bottom"&gt;
                                        &lt;xsl:value-of select="number(./@b)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="height"&gt;
                                        &lt;xsl:value-of select="number($bottom)-number($top)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;

                                    &lt;word&gt;
                                        &lt;xsl:attribute name="t"&gt;
                                            &lt;xsl:value-of select="number(./@t)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="b"&gt;
                                            &lt;xsl:value-of select="number(./@b)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="l"&gt;
                                            &lt;xsl:value-of select="number(./@l)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;xsl:attribute name="r"&gt;
                                            &lt;xsl:value-of select="number(./@r)"/&gt;
                                        &lt;/xsl:attribute&gt;
                                        &lt;div&gt;
                                            &lt;xsl:attribute name="style"&gt;top:&lt;xsl:value-of select="number(./@t+$pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number(./@l)"/&gt;px; width:&lt;xsl:value-of select="number(./@r)-number(./@l)"/&gt;px; height:&lt;xsl:value-of select="number(./@b)-number(./@t)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;
                                            &lt;/xsl:attribute&gt;
                                            &lt;xsl:attribute name="class"&gt;rcc&lt;/xsl:attribute&gt;
                                            &lt;xsl:value-of select="$charValue"/&gt;
                                        &lt;/div&gt;
                                    &lt;/word&gt;

                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($top)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($top)+number($pageHeight)+number($height)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                                    &lt;xsl:value-of select="number($charConfidence)"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($top)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($height)"/&gt;px; font-size: &lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($rotatedFontHeight)"/&gt;px;"
                                    &lt;xsl:text disable-output-escaping="yes"&gt; class="rcc"&amp;gt;&lt;/xsl:text&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:for-each&gt;

                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;
                    &lt;/xsl:when&gt;

                    &lt;xsl:otherwise&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)+number($lineHeight)"/&gt;" l="&lt;xsl:value-of select="number($lineLeft)"/&gt;" r="&lt;xsl:value-of select="number($lineLeft)+number($lineWidth)"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                        &lt;xsl:value-of select="$charConfidence"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number($lineLeft)"/&gt;px; width:&lt;xsl:value-of select="number($lineWidth)"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;"
                        &lt;xsl:text disable-output-escaping="yes"&gt;class="t"&amp;gt;&lt;/xsl:text&gt;
                        &lt;xsl:for-each select="descendant::wfocr:charParams"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="not(normalize-space(./text()))"&gt;
                                    &lt;xsl:variable name="right"&gt;
                                        &lt;xsl:value-of select="number(following-sibling::*[not(self::*[@charConfidence])][1]/@l[1])"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="left"&gt;
                                        &lt;xsl:value-of select="number(./@r)"/&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:variable name="width"&gt;
                                        &lt;xsl:choose&gt;
                                            &lt;xsl:when test="not(normalize-space($right))"&gt;
                                                &lt;xsl:value-of select="number($lineRight)-number($left)"/&gt;
                                            &lt;/xsl:when&gt;
                                            &lt;xsl:otherwise&gt;
                                                &lt;xsl:value-of select="number($right)-number($left)"/&gt;
                                            &lt;/xsl:otherwise&gt;
                                        &lt;/xsl:choose&gt;
                                    &lt;/xsl:variable&gt;
                                    &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt; &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;word t&lt;/xsl:text&gt;="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;" b="&lt;xsl:value-of select="number($lineTop)+number($pageHeight)+number($lineHeight)"/&gt;" r="&lt;xsl:value-of select="number(./@r[1])+number($width)"/&gt;" l="&lt;xsl:value-of select="number(./@r[1])"/&gt;"&lt;xsl:text disable-output-escaping="yes"&gt; charConfidence="&lt;/xsl:text&gt;
                                    &lt;xsl:value-of select="$charConfidence"/&gt; &lt;xsl:text disable-output-escaping="yes"&gt;"&amp;gt;&amp;lt;div style&lt;/xsl:text&gt;= "top:&lt;xsl:value-of select="number($lineTop)+number($pageHeight)"/&gt;px;left:&lt;xsl:value-of select="number(./@r[1])"/&gt;px; width:&lt;xsl:value-of select="number($width)"/&gt;px; height:&lt;xsl:value-of select="number($lineHeight)"/&gt;px; font-size: &lt;xsl:value-of select="number($fontHeight)"/&gt;px;line-height:&lt;xsl:value-of select="number($fontHeight)"/&gt;px;"
                                    &lt;xsl:text disable-output-escaping="yes"&gt;class="t"&amp;gt;&lt;/xsl:text&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="normalize-space(./text())"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:for-each&gt;
                        &lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;/div&amp;gt;&amp;lt;/word&amp;gt;&lt;/xsl:text&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/formatting&gt;
        &lt;/line&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
]]&gt;&lt;/template&gt;&lt;/stylesheet&gt;
		&lt;/xslt&gt;
	&lt;/var-def&gt;

	&lt;var-def name="htmlWordsDocument"&gt;
		&lt;script return="addImgTag(htmlWordsDocumentRaw.toString(), placeholder.toString(), imageLink.toString())"&gt;&lt;/script&gt;
	&lt;/var-def&gt;

	&lt;var-def name="ocr_tood_document_url"&gt;
        &lt;s3 bucket="${s3_bucket_name}"&gt;
            &lt;s3-put path="${bp_run_id}/${document_uuid}/${ocr_document_name}-tood.xml" acl="PublicRead" content-type="text/html; charset=utf-8" content-disposition="inline"&gt;
                &lt;var name="htmlWordsDocument" /&gt;
            &lt;/s3-put&gt;
        &lt;/s3&gt;
    &lt;/var-def&gt;
    
  	&lt;loop item="map" maxloops="1"&gt;
		&lt;list&gt;
			&lt;var name="ocr_result_list" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;script language="groovy"&gt;&lt;![CDATA[
				import com.google.gson.Gson;
				
				map.getWrappedObject().put("ocr_tood_document_url", ocr_tood_document_url.toString());
				map.getWrappedObject().put("ocr_tood_document_name", ocr_tood_document_url.toString().substring(ocr_tood_document_url.toString().lastIndexOf("/") + 1, ocr_tood_document_url.toString().lastIndexOf(".")));
				update_ocr_result_list.toList().add(new HashMap(map.getWrappedObject()));

				Gson gson = new Gson();
				String result_json = gson.toJson(update_ocr_result_list.toList());
				sys.defineVariable("ocr_json", result_json);
			]]&gt;&lt;/script&gt;
		&lt;/body&gt;
	&lt;/loop&gt;

    &lt;export include-original-data="true"&gt;
      	&lt;single-column name="ocr_json_pre" value="${ocr_json}" /&gt;
      	&lt;single-column name="document_xml_words_pre" value="${htmlWordsDocument}" /&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>739ff5d6-8c70-48eb-8922-3303f1bda3d0</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>[TOOD] XSLT XML Enrichment with WORD and DIV tags</name>
                                <machineConfigOptions/>
                                <source>
                                    <availability></availability>
                                    <deleted>false</deleted>
                                    <description>100 local threads</description>
                                    <equallyDistributeLoad>false</equallyDistributeLoad>
                                    <name>100 local threads</name>
                                    <prioritizeEarlierRuns>true</prioritizeEarlierRuns>
                                    <proxySettings>
                                        <password></password>
                                        <server></server>
                                        <username></username>
                                        <validationEnabled>false</validationEnabled>
                                    </proxySettings>
                                    <threadCount>100</threadCount>
                                    <threadsPerNode>false</threadsPerNode>
                                    <timeZone>GMT</timeZone>
                                    <tps>0</tps>
                                    <url></url>
                                    <version>
                                        <componentUuid>5c9d7f49-7016-11e6-a889-22000b994623</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2010-01-01T00:00:00Z</lastModified>
                                        <versionUuid>bd5ce11b-7017-11e6-a889-22000b994623</versionUuid>
                                    </version>
                                </source>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>739ff5d6-8c70-48eb-8922-3303f1bda3d0</uuid>
                                <version>
                                    <componentUuid>630c6cd3-f080-49bd-91ca-96336a74915d</componentUuid>
                                    <incrementalVersion>1.8</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>ed957c71-d176-496f-8bb5-57b4c39ab8bc</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_MANUALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>[TOOD] XSLT XML Enrichment with WORD and DIV tags</title>
                            <type>SINGLE</type>
                            <uuid>5090ed59-2c18-441d-ab1b-2fa34e61089c</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>b7078e1e-d313-448a-ab11-4e78c89c79a2</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>4f5ffc07-f079-4a08-90e4-cdf14e060cad</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;

  	&lt;required name="original_document_url"/&gt;
	
    &lt;var-def name="document_link"&gt;
     	 &lt;template&gt;${original_document_url}&lt;/template&gt;
    &lt;/var-def&gt;
  
  	&lt;var-def name="name_of_page"&gt;
     	 page_for_manual_tagging
    &lt;/var-def&gt;
  
  	&lt;var-def name="desired_dpi"&gt;
     	 &lt;template&gt;288&lt;/template&gt;
    &lt;/var-def&gt;
  
  	&lt;var-def name="convert_path"&gt;
     	 &lt;var-global name="convert_lib_path"/&gt;
    &lt;/var-def&gt;
  
  &lt;log&gt;&lt;template&gt;${convert_path}&lt;/template&gt;&lt;/log&gt;
    &lt;var-def name="document_uuid"&gt;
         &lt;script return="uuid"&gt;&lt;![CDATA[String uuid = UUID.randomUUID().toString();]]&gt; &lt;/script&gt;
    &lt;/var-def&gt;   
  
	&lt;var-def name="fileList"&gt;
		&lt;script return="convert(document_link.toString(), convert_path.toString())"&gt;&lt;![CDATA[
			import java.io.BufferedReader;
			import java.io.File;
			import java.io.IOException;
			import java.io.InputStreamReader;
			import java.net.URL;
			import com.itextpdf.text.Image;

			import com.google.common.io.Files;
			import org.apache.commons.io.FileUtils;
			import org.apache.commons.io.FilenameUtils;
			import com.freedomoss.workfusion.utils.gson.GsonUtils;
			import org.webharvest.runtime.variables.ListVariable;
			import org.webharvest.runtime.variables.Variable;

			static Integer counter;
			static File outputFolder;
			static Integer size;
			static ListVariable lv;

			static int getSize(){
				return size;
			}

   			static Variable staticGetVariable(Object i){
				return lv.get((Integer)i);
			}

			static boolean getOS(){
				return ((String)System.getProperties().get("os.name")).contains("Windows");
			}

			boolean isWindows=getOS();

			String dpi = desired_dpi.getWrappedObject().get(0).getWrappedObject().toString();
			String convert = convert_path.getWrappedObject().get(0).getWrappedObject().toString();


			static ListVariable convert(String documentLink, String convertPath) throws IOException, InterruptedException {
				File baseDir = Files.createTempDir();

				File inputFolder = new File(baseDir, "input");

				URL documentUrl = new URL(documentLink);
				String inputFileName = FilenameUtils.getName(documentUrl.getPath());
				if (inputFileName == null || inputFileName.isEmpty()) {
					inputFileName = "input.pdf";
				}

				File inputFile = new File(inputFolder, inputFileName);
				FileUtils.copyURLToFile(documentUrl, inputFile);

				outputFolder = new File(baseDir, "output");
				FileUtils.forceMkdir(outputFolder);

				File result = new File(outputFolder, "output.png");
				File resultTiff = new File(outputFolder, "output.tiff");
				log.info("convertPath "+ convertPath);
				if (isWindows){
				invoke(new ProcessBuilder(new String[] {
					"magick",
					"convert",
					"-density",dpi,
					"-depth","1",
					"-colorspace","Gray",
					inputFile.getAbsolutePath(),
					// "-resize", "25%",
					result.getAbsolutePath()}
				));
				} else {
				invoke(new ProcessBuilder(new String[] {
					convertPath,
					"-density",dpi,
					"-depth","1",
					"-colorspace","Gray",
					inputFile.getAbsolutePath(),
					// "-resize", "25%",
					result.getAbsolutePath()}
				));
    			}
				List list=new ArrayList();
				counter=0;
				File created=new File(outputFolder, "output-"+counter.toString()+".png");
				while (created.exists()){
					counter++;
					list.add(created);
					created=new File(outputFolder, "output-"+counter.toString()+".png");
				}
				if (counter==0){
					created=new File(outputFolder, "output.png");
					if (created.exists()){
						File updated=new File(outputFolder, "output-0.png");
						created.renameTo(updated);
						counter++;
						list.add(updated);
					}
				}
				size=list.size();
				counter=0;
				lv=new ListVariable(list);
				return lv;
			}

			static void invoke(ProcessBuilder builder) throws IOException, InterruptedException {
				builder.redirectErrorStream(true);

				System.err.println(builder.command());
				Process process = builder.start();

				BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
				String line;
				while ((line = in.readLine()) != null) {
					System.out.println(line);
				}
				in.close();

				int code = process.waitFor();
				if (code != 0) {
					throw new RuntimeException("Failed to invoke process: " + builder.command() + ". Return code: " + code);
				}
			}
		]]&gt;&lt;/script&gt;
	&lt;/var-def&gt;
	
	&lt;var-def name="numberOfPages"&gt;
		&lt;script return="getSize()" /&gt;
	&lt;/var-def&gt;

	&lt;loop item="fileJavaObject" index="i" filter="unique"&gt;
		&lt;list&gt;
			&lt;var name="fileList" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;log&gt;
				&lt;template&gt;File: ${fileJavaObject}&lt;/template&gt;
			&lt;/log&gt;
			&lt;var-def name="key"&gt;
				&lt;script return="staticGetVariable(i.toInt()-1)"&gt;&lt;/script&gt;
			&lt;/var-def&gt;
			&lt;var-def name="content-${i}"&gt;
		        &lt;file path="${key}" type="binary"/&gt;
			&lt;/var-def&gt;
			&lt;var-def name="content"&gt;
				&lt;var name="content-${i}" /&gt;
			&lt;/var-def&gt;

			&lt;var-def name="converted_link-${i}"&gt;
        		&lt;s3  bucket="${s3_bucket_name}"&gt;
         			&lt;s3-put-public path="${document_uuid}/${name_of_page}-${i}.png" content="${content}" content-type="image/png" content-disposition="inline"/&gt;
        		&lt;/s3&gt;
			&lt;/var-def&gt;
		&lt;/body&gt;
	&lt;/loop&gt;
	
	&lt;var-def name="jsonFilesUrls"&gt;
		&lt;json&gt;
			&lt;loop item="fileJavaObject" index="i" filter="unique"&gt;
				&lt;list&gt;
					&lt;var name="fileList" /&gt;
				&lt;/list&gt;
				&lt;body&gt;
					&lt;json-put key="fileList-${i}"&gt;
						&lt;var name="converted_link-${i}" /&gt;
					&lt;/json-put&gt;
				&lt;/body&gt;
			&lt;/loop&gt;
		&lt;/json&gt;
	&lt;/var-def&gt;
     
	&lt;export include-original-data="true"&gt;
		&lt;single-column name="json_file_urls_for_manual" value="${jsonFilesUrls}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>89e37187-ef96-4fcd-be73-2cf4dab5c489</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>(Copy) Split PDF into PNG pages for manual task</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>89e37187-ef96-4fcd-be73-2cf4dab5c489</uuid>
                                <version>
                                    <componentUuid>ebdec42f-9b39-4123-b610-6e27e34d9329</componentUuid>
                                    <incrementalVersion>1.5</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>804b8ec5-c1b1-4eb4-aa38-cd469790d36a</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>(Copy) Split PDF into PNG pages for manual task</title>
                            <type>SINGLE</type>
                            <uuid>5502d046-c42c-4f44-b3d3-e99df015abb2</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>d9e9d08c-21f1-4b40-88b5-5573de529760</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>7a28c961-e5bd-4a6f-8813-803d1c149a45</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to split document into PNG pages. Then we get json of pages urls for used it in "XSLT XML Enrichment with WORD and DIV tags" step.

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config charset="UTF-8"&gt;

  	&lt;required name="original_document_url"/&gt;
	
    &lt;var-def name="document_link"&gt;
     	 &lt;template&gt;${original_document_url.toString()}&lt;/template&gt;
    &lt;/var-def&gt; 
  
  	&lt;var-def name="convert_lib_path"&gt;
  		&lt;var-global name="convert_lib_path"/&gt;
  	&lt;/var-def&gt;
  
	&lt;var-def name="fileList"&gt;
		&lt;script return="convert(document_link.toString())"&gt;&lt;![CDATA[
			import java.io.BufferedReader;
			import java.io.File;
			import java.io.IOException;
			import java.io.InputStreamReader;
			import java.net.URL;
			import com.itextpdf.text.Image;

			import com.google.common.io.Files;
			import org.apache.commons.io.FileUtils;
			import org.apache.commons.io.FilenameUtils;
			import com.freedomoss.workfusion.utils.gson.GsonUtils;
			import org.webharvest.runtime.variables.ListVariable;
			import org.webharvest.runtime.variables.Variable;

			static Integer counter;
			static File outputFolder;
			static Integer size;
			static ListVariable lv;

			static int getSize(){
				return size;
			}

   			static Variable staticGetVariable(Object i){
				return lv.get((Integer)i);
			}

			static boolean getOS(){
				return ((String)System.getProperties().get("os.name")).contains("Windows");
			}

			boolean isWindows=getOS();


			static ListVariable convert(String documentLink) throws IOException, InterruptedException {
				File baseDir = Files.createTempDir();

				File inputFolder = new File(baseDir, "input");

				URL documentUrl = new URL(documentLink);
				String inputFileName = FilenameUtils.getName(documentUrl.getPath());

				if (inputFileName == null || inputFileName.isEmpty()) {
					inputFileName = "input.pdf";
				}

				File inputFile = new File(inputFolder, inputFileName);
				FileUtils.copyURLToFile(documentUrl, inputFile);

				outputFolder = new File(baseDir, "output");
				FileUtils.forceMkdir(outputFolder);

				File result = new File(outputFolder, "output.png");
				File resultTiff = new File(outputFolder, "output.tiff");

				if (isWindows){
				invoke(new ProcessBuilder(new String[] {
					"magick",
					"convert",
					"-density","288",
					inputFile.getAbsolutePath(),
					// "-resize", "25%",
					result.getAbsolutePath()}
				));
				} else {
				invoke(new ProcessBuilder(new String[] {
					convert_lib_path.toString(),
					"-density","288",
					inputFile.getAbsolutePath(),
					// "-resize", "25%",
					result.getAbsolutePath()}
				));
    			}

				List list=new ArrayList();
				counter=0;
				File created=new File(outputFolder, "output-"+counter.toString()+".png");
				while (created.exists()){
					counter++;
					list.add(created);
					created=new File(outputFolder, "output-"+counter.toString()+".png");
				}
				if (counter==0){
					created=new File(outputFolder, "output.png");
					if (created.exists()){
						File updated=new File(outputFolder, "output-0.png");
						created.renameTo(updated);
						counter++;
						list.add(updated);
					}
				}
				size=list.size();
				counter=0;
				lv=new ListVariable(list);
				return lv;
			}

			static void invoke(ProcessBuilder builder) throws IOException, InterruptedException {
				builder.redirectErrorStream(true);

				System.err.println(builder.command());
				Process process = builder.start();

				BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
				String line;
				while ((line = in.readLine()) != null) {
					System.out.println(line);
				}
				in.close();

				int code = process.waitFor();
				if (code != 0) {
					throw new RuntimeException("Failed to invoke process: " + builder.command() + ". Return code: " + code);
				}
			}
		]]&gt;&lt;/script&gt;
	&lt;/var-def&gt;
	
	&lt;var-def name="numberOfPages"&gt;
		&lt;script return="getSize()" /&gt;
	&lt;/var-def&gt;

	&lt;loop item="fileJavaObject" index="i" filter="unique"&gt;
		&lt;list&gt;
			&lt;var name="fileList" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;log&gt;
				&lt;template&gt;File: ${fileJavaObject}&lt;/template&gt;
			&lt;/log&gt;
			&lt;var-def name="key"&gt;
				&lt;script return="staticGetVariable(i.toInt()-1)"&gt;&lt;/script&gt;
			&lt;/var-def&gt;
			&lt;var-def name="content-${i}"&gt;
		        &lt;file path="${key}" type="binary"/&gt;
			&lt;/var-def&gt;
			&lt;var-def name="content"&gt;
				&lt;var name="content-${i}" /&gt;
			&lt;/var-def&gt;

			&lt;var-def name="converted_link-${i}"&gt;
        		&lt;s3  bucket="${s3_bucket_name}"&gt;
         			&lt;s3-put-public path="${bp_run_id}/${document_uuid}/page-${i}.png" content="${content}" content-type="image/png" content-disposition="inline"/&gt;
        		&lt;/s3&gt;
			&lt;/var-def&gt;
		&lt;/body&gt;
	&lt;/loop&gt;
	
	&lt;var-def name="jsonFilesUrls"&gt;
		&lt;json&gt;
			&lt;loop item="fileJavaObject" index="i" filter="unique"&gt;
				&lt;list&gt;
					&lt;var name="fileList" /&gt;
				&lt;/list&gt;
				&lt;body&gt;
					&lt;json-put key="fileList-${i}"&gt;
						&lt;var name="converted_link-${i}" /&gt;
					&lt;/json-put&gt;
				&lt;/body&gt;
			&lt;/loop&gt;
		&lt;/json&gt;
	&lt;/var-def&gt;
     
	&lt;export include-original-data="true"&gt;
		&lt;single-column name="pages" value="${numberOfPages}" /&gt;
		&lt;single-column name="json_file_urls" value="${jsonFilesUrls}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>8f71867e-f381-4a5f-ab26-067e77fb8bb4</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>Split document into PNG pages</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>8f71867e-f381-4a5f-ab26-067e77fb8bb4</uuid>
                                <version>
                                    <componentUuid>2cb2d23f-618d-4758-9b0a-f16502e1072d</componentUuid>
                                    <incrementalVersion>1.6</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>8ed6af4d-063d-4df0-beca-347ff06dc8f2</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>Split document into PNG pages</title>
                            <type>SINGLE</type>
                            <uuid>68d6e4bf-728d-42c3-b959-fe50ac6e859d</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>07649149-9330-40a9-9c18-ce1a1df59b7f</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>ebc52f63-66c7-45f2-8f7e-b250e9300e5c</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to get OCR result JSON and update it for comfortable using after.

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
    scriptlang="groovy"&gt;

    &lt;script&gt;&lt;![CDATA[
        import groovy.json.JsonSlurper;

        List&lt;Map&gt; cached_ocr_result_list = new JsonSlurper().parseText(cached_ocr_json.toString());
        sys.defineVariable("cached_ocr_result_list", cached_ocr_result_list);
        
        List&lt;Map&gt; ocr_result_list = new ArrayList();
        if( sys.isVariableDefined("ocr_json")) {
            ocr_result_list = new JsonSlurper().parseText(ocr_json.toString());
        }
        sys.defineVariable("ocr_result_list", ocr_result_list);

        Map&lt;String,Map&lt;String, String&gt;&gt; update_ocr_result_map = new HashMap();
        sys.defineVariable("update_ocr_result_map", update_ocr_result_map);
    ]]&gt;&lt;/script&gt;
      
    &lt;loop item="map"&gt;
        &lt;list&gt;
            &lt;var name="cached_ocr_result_list" /&gt;
        &lt;/list&gt;
        &lt;body&gt;
            &lt;script&gt;&lt;![CDATA[
                String ocr_export_format = map.getWrappedObject().get("ocr_export_format").toString();
                
                map.getWrappedObject().remove("original_document_name");
                map.getWrappedObject().remove("ocr_document_name");
                map.getWrappedObject().remove("ocr_raw_processed_document_name");
                map.getWrappedObject().remove("ocr_tood_document_name");
                
                update_ocr_result_map.getWrappedObject().put(ocr_export_format, map.getWrappedObject());
            ]]&gt;&lt;/script&gt;
        &lt;/body&gt;
    &lt;/loop&gt;
  
    &lt;loop item="map"&gt;
        &lt;list&gt;
            &lt;var name="ocr_result_list" /&gt;
        &lt;/list&gt;
        &lt;body&gt;
            &lt;script&gt;&lt;![CDATA[
                String ocr_export_format = map.getWrappedObject().get("ocr_export_format").toString();
                
                map.getWrappedObject().remove("original_document_name");
                map.getWrappedObject().remove("ocr_document_name");
                map.getWrappedObject().remove("ocr_raw_processed_document_name");
                map.getWrappedObject().remove("ocr_tood_document_name");
                
                update_ocr_result_map.getWrappedObject().put(ocr_export_format, map.getWrappedObject());
            ]]&gt;&lt;/script&gt;
        &lt;/body&gt;
    &lt;/loop&gt;

    &lt;script&gt;&lt;![CDATA[
        import com.google.gson.Gson;

        Gson gson = new Gson();
        String result_json = gson.toJson(update_ocr_result_map.getWrappedObject());
        sys.defineVariable("ocr_json", result_json);
    ]]&gt;&lt;/script&gt;

    &lt;export include-original-data="true"&gt;
        &lt;single-column name="ocr_json" value="${ocr_json}" /&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>d27dbf64-173b-48b0-96dc-f84ca71550f8</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>Result JSON processing</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>d27dbf64-173b-48b0-96dc-f84ca71550f8</uuid>
                                <version>
                                    <componentUuid>6c67e4c6-92a4-4130-949e-3f1e913e1acb</componentUuid>
                                    <incrementalVersion>1.9</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>b5dd93fd-167f-4359-8a4f-9e85ea1784a1</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>Result JSON processing</title>
                            <type>SINGLE</type>
                            <uuid>830299d4-be59-4bba-bb1c-31211235fd4c</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>3a088a08-d3d1-49cb-8262-aa6c737e6678</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>0d0c3073-8a21-493c-b8c3-032511def7db</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- to export --&gt;
&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="java" charset="UTF-8"&gt;
	&lt;script language="groovy"&gt;&lt;![CDATA[
		import groovy.json.JsonSlurper;

		List&lt;Map&gt; ocr_result_list = new JsonSlurper().parseText(ocr_json_pre.toString());
		sys.defineVariable("ocr_result_list", ocr_result_list);

        List&lt;Map&gt; update_ocr_result_list = new ArrayList();
		sys.defineVariable("update_ocr_result_list", update_ocr_result_list);

]]&gt;&lt;/script&gt;

	&lt;var-def name="xmlWords"&gt;
		&lt;template&gt;${document_xml_words_pre}&lt;/template&gt;
	&lt;/var-def&gt;

    &lt;var-def name="htmlWordsDocument"&gt;
		&lt;xslt&gt;
			&lt;xml&gt;
				&lt;var name="xmlWords" /&gt;
			&lt;/xml&gt;
			&lt;stylesheet&gt;&lt;template&gt;&lt;![CDATA[ 
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml"&gt;
    &lt;xsl:output method="html" omit-xml-declaration="yes" media-type="text/html" indent="no"/&gt;
    &lt;xsl:template match="html"&gt;

&lt;html&gt;
    &lt;xsl:apply-templates select="./head"/&gt;
    &lt;xsl:apply-templates select="./body"/&gt;
&lt;/html&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="head"&gt;
        &lt;head&gt;
            &lt;xsl:apply-templates select="./meta"/&gt;
            &lt;xsl:apply-templates select="./style"/&gt;
        &lt;/head&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="meta"&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="style"&gt;
        &lt;style&gt;
            &lt;xsl:copy-of select="./@*"/&gt;
            &lt;xsl:value-of select="./text()"/&gt;
        &lt;/style&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="body"&gt;
        &lt;body&gt;
        &lt;xsl:copy-of select="./@*"/&gt;
        &lt;xsl:apply-templates select="./document"/&gt;
        &lt;/body&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="document"&gt;

        &lt;document&gt;
            &lt;xsl:copy-of select="./@*"/&gt;
            &lt;main id="content" style="position:absolute;top:0;left:0;width:calc(100% - 90px);height:100%;overflow-y:scroll"&gt;
                &lt;xsl:apply-templates select="./page"/&gt;
            &lt;/main&gt;
            &lt;aside id="minimap" style="position:absolute;top:0;left:calc(100% - 90px);right:0;height:100%;border-left: solid 1px grey"&gt;
            &lt;/aside&gt;
        &lt;/document&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="page"&gt;
        &lt;xsl:variable name="pageNumber"&gt;
            &lt;xsl:value-of select="count(preceding::page)"/&gt;
        &lt;/xsl:variable&gt;
        &lt;dl&gt;
            &lt;xsl:attribute name="data-section-title"&gt; &lt;/xsl:attribute&gt;
            &lt;xsl:attribute name="style"&gt;background-color:white;margin:0px;padding:0px;position:absolute;left:0px;top:0px;&lt;/xsl:attribute&gt;
            &lt;xsl:attribute name="class"&gt;minimap-section&lt;/xsl:attribute&gt;
            &lt;dt&gt; &lt;/dt&gt;&lt;dd&gt;
            &lt;xsl:attribute name="style"&gt;position:absolute;left:0px;top:0px;&lt;/xsl:attribute&gt;
            &lt;page&gt;
                &lt;xsl:copy-of select="./@*"/&gt;

	            &lt;xsl:attribute name="style"&gt;z-index:1;transform-origin:top left;&lt;/xsl:attribute&gt;
                &lt;xsl:copy-of select="./*"/&gt;
            &lt;/page&gt;
        &lt;/dd&gt;&lt;/dl&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
]]&gt;&lt;/template&gt;&lt;/stylesheet&gt;
		&lt;/xslt&gt;
	&lt;/var-def&gt;

	&lt;var-def name="documentS3Link"&gt;
		&lt;s3 bucket="${s3_bucket_name}"&gt;
			&lt;s3-put path="${document_uuid}/minimap.html"
				acl="PublicRead" content-type="text/html; charset=utf-8"
				content-disposition="inline"&gt;
				&lt;var name="htmlWordsDocument" /&gt;
			&lt;/s3-put&gt;
		&lt;/s3&gt;
	&lt;/var-def&gt;
  
  	&lt;loop item="map" maxloops="1"&gt;
		&lt;list&gt;
			&lt;var name="ocr_result_list" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;script language="groovy"&gt;&lt;![CDATA[
				import com.google.gson.Gson;
				
				map.getWrappedObject().put("ocr_tood_document_url", documentS3Link.toString());
				map.getWrappedObject().put("ocr_tood_document_name", documentS3Link.toString().substring(documentS3Link.toString().lastIndexOf("/") + 1, documentS3Link.toString().lastIndexOf(".")));
				update_ocr_result_list.toList().add(new HashMap(map.getWrappedObject()));

				Gson gson = new Gson();
				String result_json = gson.toJson(update_ocr_result_list.toList());
				sys.defineVariable("ocr_json", result_json);
			]]&gt;&lt;/script&gt;
		&lt;/body&gt;
	&lt;/loop&gt;
  
	&lt;export include-original-data="true"&gt;
		&lt;!--&lt;single-column name="document_xml_words_link_pre" value="${documentS3Link}" /&gt;--&gt;
            	&lt;single-column name="ocr_json" value="${ocr_json}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                <description>Inserts minimap</description>
                                <includedConfigs/>
                                <inclusionCode>4059d447-3733-4141-9db5-17599697b4ae</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>[TOOD] Minimap creation</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>4059d447-3733-4141-9db5-17599697b4ae</uuid>
                                <version>
                                    <componentUuid>91bac385-56dc-4c7d-9b2f-51061f9d38d3</componentUuid>
                                    <incrementalVersion>1.4</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>877324a6-1b6f-4988-9507-41ec97044cc1</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>[TOOD] Minimap creation</title>
                            <type>SINGLE</type>
                            <uuid>9749dc74-5d37-4524-9cef-742a5c97347f</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>cb3a0779-363e-41cc-8e39-42a649c645a2</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>d50937e2-7eee-420e-b7ed-7a570e67ad24</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to save all new OCR result JSON members into cache data store. The special flag skip_ocr_cache can be set to 1 to force no cache for OCRed results

@Author: Alexey Shalak
@Author: Sergey Emelianov
@Version: 2.5
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config&gt;
	&lt;var-def name="key"&gt;
		&lt;template&gt;${document_hash}&lt;/template&gt;
	&lt;/var-def&gt;
	
	&lt;var-def name="skip_ocr_cache"&gt;
		&lt;template&gt;${skip_ocr_cache}&lt;/template&gt;
	&lt;/var-def&gt;
  
	&lt;script language="groovy"&gt;&lt;![CDATA[
		import groovy.json.JsonSlurper;

		List&lt;Map&gt; ocr_result_list = new JsonSlurper().parseText(ocr_json.toString());
		sys.defineVariable("ocr_result_list", ocr_result_list);
	]]&gt;&lt;/script&gt;

	&lt;loop item="map"&gt;
		&lt;list&gt;
			&lt;var name="ocr_result_list" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;script&gt;&lt;![CDATA[
				Map originalData = new LinkedHashMap();
				originalData.put("key", key.toString());
				originalData.put("cached_at", javax.xml.bind.DatatypeConverter.printDateTime(Calendar.getInstance()));

				originalData.put("ocr_type", ocr_type.toString());
				originalData.put("export_format", map.getWrappedObject().get("ocr_export_format").toString());
                originalData.put("text_type", text_type.toString());
				originalData.put("document_language", document_language.toString());
				originalData.put("ocr_xml_char_recognition", ocr_xml_char_recognition.toString());
				originalData.put("allowed_region_types", allowed_region_types.toString());
				originalData.put("custom_regions", custom_regions.toString());
				originalData.put("change_dpi", change_dpi.toString());
				originalData.put("invert_image", invert_image.toString());
				originalData.put("discard_color_image", discard_color_image.toString());
				originalData.put("remove_color_objects", remove_color_objects.toString());
				originalData.put("remove_color_objects_type", remove_color_objects_type.toString());

				originalData.put("ocr_json", new com.google.gson.Gson().toJson(map.getWrappedObject()));
			]]&gt;&lt;/script&gt;

			&lt;var-def name="originalDataJson"&gt;
				&lt;script return="new com.google.gson.Gson().toJson(originalData)" /&gt;
			&lt;/var-def&gt;
			
			&lt;case&gt;
				&lt;if condition='${skip_ocr_cache.toString().length() &gt; 0 &amp;amp;&amp;amp; skip_ocr_cache.toString().equals("1") }'&gt;
					&lt;log level="WARN" message="Process running with SKIP CACHE variable set to 1. No caching."/&gt;
				&lt;/if&gt;
				&lt;else&gt;
					&lt;insert-datastore datastore-name="${cache_datastore}" json-value-map="${originalDataJson}" create="true" /&gt;
				&lt;/else&gt;
			&lt;/case&gt;
		&lt;/body&gt;
	&lt;/loop&gt;
	&lt;export include-original-data="true"/&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>9fdad1f5-d809-4afa-b2dd-1ad719d09dfb</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>Cache OCR results</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>9fdad1f5-d809-4afa-b2dd-1ad719d09dfb</uuid>
                                <version>
                                    <componentUuid>aa736c86-588c-47da-9c8f-b7057411e6b0</componentUuid>
                                    <incrementalVersion>1.1</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>bb912529-980b-43d1-9e4b-84d280b03c34</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>Cache OCR results</title>
                            <type>SINGLE</type>
                            <uuid>9b96d748-3ca0-4cc9-9ee5-a7e64487cd14</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>6ea2495f-69a2-4eb8-8e2a-72a32c157d05</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>6e0da192-9b9b-4d41-8142-a7948def21f5</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to configure OCR parameters

@Author: Alexey Shalak
@Version: 1.0
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy"&gt;
  
  	&lt;required name="s3_bucket_name"/&gt;
  	&lt;required name="ocr_type"/&gt;
  	&lt;required name="cache_datastore"/&gt;
  
  	&lt;script&gt;&lt;![CDATA[
		if(ocr_type.toString().equals("tood")) {
			export_format = "xmlForCorrectedImage";
		} else if (ocr_type.toString().equals("standard")) {
  			if( !sys.isVariableDefined("export_format") || export_format == null || export_format.toString().isEmpty()) {
				export_format = "xmlForCorrectedImage";
			} else {
				export_format = export_format.toString().replace("|", ",");
			}
		}
		sys.defineVariable("exportFormat", export_format);

		if( !sys.isVariableDefined("text_type") || text_type == null || text_type.toString().isEmpty()) {
			text_type = "normal";
		} else {
			text_type = text_type.toString().replace(" ", "");
		}
		sys.defineVariable("text_type", text_type);

		if( !sys.isVariableDefined("document_language") || document_language == null || document_language.toString().isEmpty()) {
			document_language = "English";
		} else {
			document_language = document_language.toString().replace(" ", "");
		}
		sys.defineVariable("documentLanguage", document_language);

		if( !sys.isVariableDefined("ocr_xml_char_recognition") || ocr_xml_char_recognition == null || ocr_xml_char_recognition.toString().isEmpty()) {
			ocr_xml_char_recognition = "false";
		}
		sys.defineVariable("ocrXmlCharRecognition", ocr_xml_char_recognition);

		if( !sys.isVariableDefined("allowed_region_types") || allowed_region_types == null || allowed_region_types.toString().isEmpty()) {
			allowed_region_types = "BT_Table,BT_Text,BT_Separator,BT_SeparatorGroup,BT_Checkmark,BT_CheckmarkGroup,BT_AutoAnalysis";
		} else {
			allowed_region_types = allowed_region_types.toString().replace("|", ",");
		}
		sys.defineVariable("allowed_region_types", allowed_region_types)

		if( !sys.isVariableDefined("custom_regions") || custom_regions == null) {
			custom_regions = "";
		}
		sys.defineVariable("custom_regions", custom_regions);

		if( !sys.isVariableDefined("change_dpi") || change_dpi == null) {
			change_dpi = "";
		}	
 		sys.defineVariable("change_dpi", change_dpi);

		if( !sys.isVariableDefined("invert_image") || invert_image == null || invert_image.toString().isEmpty()) {
			invert_image = "false";
		}
		sys.defineVariable("invertImage", invert_image)

		if( !sys.isVariableDefined("discard_color_image") || discard_color_image == null || discard_color_image.toString().isEmpty()) {
			discard_color_image = "false";
		}
		sys.defineVariable("discardColorImage", discard_color_image);
		
		if( !sys.isVariableDefined("remove_color_objects") || remove_color_objects == null) {
			remove_color_objects = "";
		}	
 		sys.defineVariable("remove_color_objects", remove_color_objects);

		if( !sys.isVariableDefined("remove_color_objects_type") || remove_color_objects_type == null || remove_color_objects_type.toString().isEmpty()) {
			remove_color_objects_type = "Background";
		}
		sys.defineVariable("removeColorObjectsType", remove_color_objects_type);
	]]&gt;&lt;/script&gt;
  
	&lt;var-def name="document_uuid"&gt;
		&lt;script language="java" return="uuid"&gt;&lt;![CDATA[
			String uuid = UUID.randomUUID().toString();
		]]&gt;&lt;/script&gt;
	&lt;/var-def&gt;
  
  	&lt;var-def name="bp_run_id"&gt;
		&lt;template&gt;
			${item.getWrappedObject().getRun().getRootRunUuid()}
		&lt;/template&gt;
	&lt;/var-def&gt;
  
	&lt;export include-original-data="true"&gt;
      	&lt;single-column name="cache_datastore" value="${cache_datastore}"/&gt;
    	&lt;single-column name="export_format" value="${exportFormat}"/&gt;
        &lt;single-column name="text_type" value="${text_type}"/&gt;
        &lt;single-column name="document_language" value="${documentLanguage}"/&gt;
        &lt;single-column name="ocr_xml_char_recognition" value="${ocrXmlCharRecognition}"/&gt;
      	&lt;single-column name="allowed_region_types" value="${allowed_region_types}"/&gt;
      	&lt;single-column name="custom_regions" value="${custom_regions}"/&gt;
      	&lt;single-column name="change_dpi" value="${change_dpi}"/&gt;
        &lt;single-column name="invert_image" value="${invertImage}"/&gt;
        &lt;single-column name="discard_color_image" value="${discardColorImage}"/&gt;
      	&lt;single-column name="remove_color_objects" value="${remove_color_objects}"/&gt;
      	&lt;single-column name="remove_color_objects_type" value="${removeColorObjectsType}"/&gt;
      
      	&lt;single-column name="bp_run_id" value="${bp_run_id}"/&gt;
      	&lt;single-column name="document_uuid" value="${document_uuid}"/&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>f22ddef3-6136-44cd-b03b-6bbb88ef75ab</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>Input data processing</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>f22ddef3-6136-44cd-b03b-6bbb88ef75ab</uuid>
                                <version>
                                    <componentUuid>61d610fc-06ea-4783-8c16-acc215d35b92</componentUuid>
                                    <incrementalVersion>1.1</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>3d8df8ef-b123-45d5-a7f1-aeafde0e796e</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>Input data processing</title>
                            <type>SINGLE</type>
                            <uuid>bbca737f-f62b-43d6-bd7f-23724601c5dc</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>fd1f23b4-fe8c-4619-8adf-7238b6777d77</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>4fa8d461-47e1-49de-afd6-cd25c8b4b838</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
    &lt;export include-original-data="true"&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>61154f77-a977-46b0-97f1-98f876cb8f00</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Other</name>
                                        <private>false</private>
                                        <publicId>dd92f240-144b-4fef-8476-4ec0acbc1105</publicId>
                                    </category>
                                    <contentType>BLANK</contentType>
                                    <description></description>
                                    <enabled>true</enabled>
                                    <name>Miscellaneous Tasks</name>
                                    <publicId>26e6e095-00bb-43fa-8c34-af0b18e71ac9</publicId>
                                    <version>
                                        <componentUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-05-28T11:12:13Z</lastModified>
                                        <versionUuid>26e6e095-00bb-43fa-8c34-af0b18e71ac9</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>Blank</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                        <version>
                                            <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2012-12-27T00:00:00Z</lastModified>
                                            <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>GoTo OCR</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
	&lt;export include-original-data="true"&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>Blank</name>
                                    <origination>CREATED_MANUALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>BASE_MACHINE</type>
                                    <uuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</uuid>
                                    <version>
                                        <componentUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2012-12-27T00:00:00Z</lastModified>
                                        <versionUuid>8f04bd99-7f51-4796-a528-d1a7c9ccfbc4</versionUuid>
                                    </version>
                                </template>
                                <uuid>61154f77-a977-46b0-97f1-98f876cb8f00</uuid>
                                <version>
                                    <componentUuid>9da4de0b-6bf7-4578-b54f-8f07a318babc</componentUuid>
                                    <incrementalVersion>1.3</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>52b9ac77-7dea-4d3e-8b78-8358641d32df</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>GoTo OCR</title>
                            <type>SINGLE</type>
                            <uuid>c740a71a-6096-4031-a63c-fd930fbec668</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>c7cfa02a-45a7-4cdb-8543-e728c18589f7</componentUuid>
                                <incrementalVersion>1.1</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>119a32bd-4d66-4872-8926-831f9786b30c</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                        <campaign>
                            <active>false</active>
                            <businessRules/>
                            <campaignMaps/>
                            <campaigns/>
                            <executingType>MACHINE</executingType>
                            <goldBucketBlockSize>0</goldBucketBlockSize>
                            <goldRatio>0</goldRatio>
                            <goldSource>Empty</goldSource>
                            <goldType>Percentage</goldType>
                            <machineConfig>
                                <answers/>
                                <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!--
Step to make row processing for all OCR result documents with "xml" format from previous step, also put updated documents on S3 and update OCR JSON.

@Author: Alexey Shalak
@Author: Denis Uraev
@Version: 1.2
Workfusion 2018, RPA Express 2.0
--&gt;

&lt;config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy"&gt;

	&lt;script&gt;&lt;![CDATA[
		import groovy.json.JsonSlurper;

		List&lt;Map&gt; ocr_result_list = new JsonSlurper().parseText(ocr_json.toString());
		sys.defineVariable("ocr_result_list", ocr_result_list);

		List&lt;Map&gt; update_ocr_result_list = new ArrayList();
		sys.defineVariable("update_ocr_result_list", update_ocr_result_list);
	]]&gt;&lt;/script&gt;

	&lt;loop item="map"&gt;
		&lt;list&gt;
			&lt;var name="ocr_result_list" /&gt;
		&lt;/list&gt;
		&lt;body&gt;
			&lt;script&gt;&lt;![CDATA[
				sys.defineVariable("ocr_document_name", map.getWrappedObject().get("ocr_document_name").toString());
				sys.defineVariable("ocr_export_format", map.getWrappedObject().get("ocr_export_format").toString());
				sys.defineVariable("ocr_document_format", map.getWrappedObject().get("ocr_document_format").toString());
			]]&gt;&lt;/script&gt;
			&lt;case&gt;
				&lt;if condition='${ocr_document_format.toString().equals("xml")}'&gt;
					&lt;s3 bucket="${s3_bucket_name}"&gt;
						&lt;var-def name="xml_text"&gt;
							&lt;s3-get name="${bp_run_id}/${document_uuid}/${ocr_document_name}.${ocr_document_format}" /&gt;
						&lt;/var-def&gt;
					&lt;/s3&gt;

					&lt;var-def name="ocr_raw_processed_document"&gt;
						&lt;xslt&gt;
							&lt;xml&gt;
								&lt;var name="xml_text" /&gt;
							&lt;/xml&gt;                       
							&lt;stylesheet&gt;&lt;![CDATA[ &lt;?xml version="1.0" encoding="UTF-8"?&gt;
								&lt;xsl:stylesheet version="1.0"
								xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
								xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml" xmlns:csl="http://www.w3.org/1999/XSL/Transform"&gt;

								&lt;xsl:template match="@*|node()"&gt;
								&lt;xsl:copy&gt;
								&lt;xsl:apply-templates select="@*|node()"/&gt;
								&lt;/xsl:copy&gt;
               					&lt;/xsl:template&gt;

								&lt;xsl:template match="wfocr:charRecVariants" /&gt;
								&lt;xsl:template match="wfocr:*/@serifProbability" /&gt;
								&lt;xsl:template match="wfocr:*/@wordFromDictionary" /&gt;
								&lt;xsl:template match="wfocr:*/@wordPenalty" /&gt;
								&lt;xsl:template match="wfocr:*/@wordNumeric" /&gt;
								&lt;xsl:template match="wfocr:*/@wordNormal" /&gt;
								&lt;xsl:template match="wfocr:*/@wordIdentifier" /&gt;
								&lt;/xsl:stylesheet&gt;
							]]&gt;&lt;/stylesheet&gt;
						&lt;/xslt&gt;
					&lt;/var-def&gt;

					&lt;var-def name="ocr_raw_processed_document_url"&gt;
						&lt;s3 bucket="${s3_bucket_name}"&gt;
							&lt;s3-put-public
								path="${bp_run_id}/${document_uuid}/${ocr_document_name}-raw_processed.${ocr_document_format}"
								content="${ocr_raw_processed_document}" content-type="text/html; charset=utf-8"
								content-disposition="inline" /&gt;
						&lt;/s3&gt;
					&lt;/var-def&gt;
                  
					&lt;script&gt;&lt;![CDATA[
						map.getWrappedObject().put("ocr_raw_processed_document_url", ocr_raw_processed_document_url.toString());
						map.getWrappedObject().put("ocr_raw_processed_document_name", ocr_raw_processed_document_url.toString().substring(ocr_raw_processed_document_url.toString().lastIndexOf("/") + 1, ocr_raw_processed_document_url.toString().lastIndexOf(".")));
					]]&gt;&lt;/script&gt;
				&lt;/if&gt;
			&lt;/case&gt;
			
			&lt;script&gt;&lt;![CDATA[
				update_ocr_result_list.toList().add(new HashMap(map.getWrappedObject()));
			]]&gt;&lt;/script&gt;
		&lt;/body&gt;
	&lt;/loop&gt;

	&lt;script&gt;&lt;![CDATA[
		import com.google.gson.Gson;

		Gson gson = new Gson();
		String result_json = gson.toJson(update_ocr_result_list.toList());
		sys.defineVariable("ocr_json", result_json);
	]]&gt;&lt;/script&gt;


	&lt;export include-original-data="true"&gt;
		&lt;single-column name="ocr_json" value="${ocr_json}" /&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                <description></description>
                                <includedConfigs/>
                                <inclusionCode>8e64f5fd-681a-4ffd-a647-61e039baebc7</inclusionCode>
                                <jsonParams>{"configXMLModified":"true"}</jsonParams>
                                <machineWorkSetting>
                                    <category>
                                        <automation>false</automation>
                                        <description></description>
                                        <enabled>true</enabled>
                                        <executingType>MACHINE</executingType>
                                        <name>Data Transformation</name>
                                        <private>false</private>
                                        <publicId>0a266968-31f6-41f7-a7d8-09d7aeb4f581</publicId>
                                    </category>
                                    <contentType>NORMAL</contentType>
                                    <description>applies XSLT transformation to ocred text</description>
                                    <enabled>true</enabled>
                                    <name>XSLT node beauty</name>
                                    <publicId>24e334d1-c1af-4525-a067-ae4315b4c27d</publicId>
                                    <version>
                                        <componentUuid>2555349d-5e72-4894-8b1a-a14d5fe45757</componentUuid>
                                        <incrementalVersion>1.0</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2017-11-03T09:20:28Z</lastModified>
                                        <versionUuid>2dfd83e1-49f4-4521-86d4-c50506455776</versionUuid>
                                    </version>
                                    <answers/>
                                    <machineWorkSettingType>BASIC</machineWorkSettingType>
                                    <template>
                                        <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
    
    &lt;var-def name="resultXmlWithCharParams"&gt;
        &lt;xslt&gt;
            &lt;xml&gt;
                &lt;var name="document_xml" /&gt;
            &lt;/xml&gt;
            &lt;stylesheet&gt;&lt;![CDATA[ &lt;?xml version="1.0" encoding="UTF-8"?&gt;
            &lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml" xmlns:csl="http://www.w3.org/1999/XSL/Transform"&gt;

                &lt;xsl:template match="@*|node()"&gt;
                  &lt;xsl:copy&gt;
                    &lt;xsl:apply-templates select="@*|node()"/&gt;
                  &lt;/xsl:copy&gt;
                &lt;/xsl:template&gt;

                &lt;xsl:template match="wfocr:charRecVariants" /&gt;
                &lt;xsl:template match="wfocr:*/@serifProbability" /&gt;
                &lt;xsl:template match="wfocr:*/@wordFromDictionary" /&gt;
                &lt;xsl:template match="wfocr:*/@wordPenalty" /&gt;
                &lt;xsl:template match="wfocr:*/@wordNumeric" /&gt;
                &lt;xsl:template match="wfocr:*/@wordNormal" /&gt;
                &lt;xsl:template match="wfocr:*/@wordIdentifier" /&gt;
            &lt;/xsl:stylesheet&gt;             
            ]]&gt;&lt;/stylesheet&gt;
        &lt;/xslt&gt;   
    &lt;/var-def&gt;

    &lt;var-def name="documentXmlWithCharParamsLink"&gt;
        &lt;s3 bucket="public"&gt;
            &lt;s3-put-public path="${document_uuid}-with-char-params.xml"
                content="${resultXmlWithCharParams}" content-type="text/html; charset=utf-8"
                content-disposition="inline" /&gt;
        &lt;/s3&gt;
    &lt;/var-def&gt;
    
    &lt;export include-original-data="true"&gt;
      &lt;single-column name="documentXmlWithCharParamsLink" value="${documentXmlWithCharParamsLink}"/&gt;
      &lt;single-column name="resultXmlWithCharParams" value="${resultXmlWithCharParams}"/&gt;
    &lt;/export&gt;
&lt;/config&gt;</content>
                                        <name>XSLT node ocr transformation1</name>
                                        <origination>CREATED_MANUALLY</origination>
                                        <status>ACTIVE</status>
                                        <type>BASE_MACHINE</type>
                                        <uuid>8ab3df92-4935-4316-82bf-0f52d21f8105</uuid>
                                        <version>
                                            <componentUuid>3d384ef2-8ca8-41f5-8c30-e08ce0e693b4</componentUuid>
                                            <incrementalVersion>1.0</incrementalVersion>
                                            <lastInChain>true</lastInChain>
                                            <lastModified>2017-11-03T09:20:28Z</lastModified>
                                            <versionUuid>3dcdf194-b57e-418b-9011-8308743202ea</versionUuid>
                                        </version>
                                    </template>
                                </machineWorkSetting>
                                <machineWorkSettingType>BASIC</machineWorkSettingType>
                                <name>XSLT Cut off Raw OCR XML tags</name>
                                <machineConfigOptions/>
                                <sourceType>MANUAL</sourceType>
                                <template>
                                    <content>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config charset="UTF-8"&gt;
  	
  	&lt;var-def name="resultXmlWithCharParams"&gt;
		&lt;xslt&gt;
			&lt;xml&gt;
				&lt;var name="document_xml" /&gt;
			&lt;/xml&gt;
			&lt;stylesheet&gt;&lt;![CDATA[ &lt;?xml version="1.0" encoding="UTF-8"?&gt;
			&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:wfocr="http://ocr.crowdcomputingsystems.com/xml/schema-v1.xml" xmlns:csl="http://www.w3.org/1999/XSL/Transform"&gt;

                &lt;xsl:template match="@*|node()"&gt;
                  &lt;xsl:copy&gt;
                    &lt;xsl:apply-templates select="@*|node()"/&gt;
                  &lt;/xsl:copy&gt;
                &lt;/xsl:template&gt;

                &lt;xsl:template match="wfocr:charRecVariants" /&gt;
                &lt;xsl:template match="wfocr:*/@serifProbability" /&gt;
                &lt;xsl:template match="wfocr:*/@wordFromDictionary" /&gt;
                &lt;xsl:template match="wfocr:*/@wordPenalty" /&gt;
                &lt;xsl:template match="wfocr:*/@wordNumeric" /&gt;
                &lt;xsl:template match="wfocr:*/@wordNormal" /&gt;
                &lt;xsl:template match="wfocr:*/@wordIdentifier" /&gt;
            &lt;/xsl:stylesheet&gt;				
			]]&gt;&lt;/stylesheet&gt;
		&lt;/xslt&gt;	
  	&lt;/var-def&gt;

	&lt;var-def name="documentXmlWithCharParamsLink"&gt;
		&lt;s3 bucket="public"&gt;
			&lt;s3-put-public path="${document_uuid}-with-char-params.xml"
				content="${resultXmlWithCharParams}" content-type="text/html; charset=utf-8"
				content-disposition="inline" /&gt;
		&lt;/s3&gt;
	&lt;/var-def&gt;
  	
	&lt;export include-original-data="true"&gt;
      &lt;single-column name="documentXmlWithCharParamsLink" value="${documentXmlWithCharParamsLink}"/&gt;
      &lt;single-column name="resultXmlWithCharParams" value="${resultXmlWithCharParams}"/&gt;
	&lt;/export&gt;
&lt;/config&gt;</content>
                                    <name>XSLT node ocr transformation1</name>
                                    <origination>CREATED_AUTOMATICALLY</origination>
                                    <status>ACTIVE</status>
                                    <type>MACHINE</type>
                                    <uuid>8314ebc0-5100-48e0-bf0b-8c225d8ee8be</uuid>
                                    <version>
                                        <componentUuid>8eafe52b-4216-4226-915b-a8d0670be825</componentUuid>
                                        <incrementalVersion>1.1</incrementalVersion>
                                        <lastInChain>true</lastInChain>
                                        <lastModified>2018-09-25T12:55:20Z</lastModified>
                                        <versionUuid>4612e966-99c1-48b5-be47-6cd27749b45f</versionUuid>
                                    </version>
                                </template>
                                <uuid>8e64f5fd-681a-4ffd-a647-61e039baebc7</uuid>
                                <version>
                                    <componentUuid>ad427a5d-1299-40cd-ad76-a80e62c9e49e</componentUuid>
                                    <incrementalVersion>1.1</incrementalVersion>
                                    <lastInChain>true</lastInChain>
                                    <lastModified>2018-09-25T12:55:20Z</lastModified>
                                    <versionUuid>8b9268a4-5fa8-48f6-9433-161ccd677e68</versionUuid>
                                </version>
                            </machineConfig>
                            <moderation>false</moderation>
                            <origination>CREATED_AUTOMATICALLY</origination>
                            <requiresData>true</requiresData>
                            <status>ACTIVE</status>
                            <streamComplexRunThreshold>1</streamComplexRunThreshold>
                            <streamTimeInterval>Immediately</streamTimeInterval>
                            <streamTimeIntervalValue>0</streamTimeIntervalValue>
                            <streamValueType>Tasks</streamValueType>
                            <title>XSLT Cut off Raw OCR XML tags</title>
                            <type>SINGLE</type>
                            <uuid>ec327afb-02ca-4f78-b9f4-53d54a7ae058</uuid>
                            <validWorkflow>false</validWorkflow>
                            <version>
                                <componentUuid>d3177cb9-36fa-41a9-af46-f11ead30786e</componentUuid>
                                <incrementalVersion>1.5</incrementalVersion>
                                <lastInChain>true</lastInChain>
                                <lastModified>2018-09-25T13:10:25Z</lastModified>
                                <versionUuid>edc3dbf7-3ece-446b-b12c-80bf8cf03aa7</versionUuid>
                            </version>
                            <workSettingBase>false</workSettingBase>
                        </campaign>
                    </campaigns>
                    <compositeCampaignVersion>NEW_WORKFLOW</compositeCampaignVersion>
                    <compositeStructureXml>&lt;mxGraphModel&gt;&lt;root&gt;&lt;mxCell id="0"/&gt;&lt;mxCell id="1" parent="0"/&gt;&lt;SubStart campaignMapUUID="a6830f15-942d-4380-97dd-eb05b746dd92" id="49" name="Start" type="sub_start"&gt;&lt;mxCell collapsed="1" parent="1" style="start" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="1290.0" y="148.5234375"/&gt;&lt;/mxCell&gt;&lt;/SubStart&gt;&lt;Link id="52" name="" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="49" style="link" target="63"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="targetPoint" x="524.0" y="176.5234375"/&gt;&lt;Array as="points"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="b6633723-40be-4209-b851-6ac1d8f4373d" id="63" label="Input data processing" name="Input data processing" taskUUID="bbca737f-f62b-43d6-bd7f-23724601c5dc" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1440.0" y="140.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="62" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="75b9b641-1854-47b6-af80-4d93bc17f896" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="63" style="link" target="67"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="sourcePoint" x="579.0" y="187.5234375"/&gt;&lt;Array as="points"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="eae2dc65-5d31-4f15-813a-cc421bd4d616" id="67" label="Look for OCR cache" name="Look for OCR cache" taskUUID="108251c1-4a82-415f-a4fb-29b207173b2e" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1680.1166687011719" y="140.75677490234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="70" name="" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="67" style="link" target="69"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"/&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Rule id="69" name="Cache hit?" ruleUUID="1706a988-73a1-45d8-897a-13d9d837991a" type="rule"&gt;&lt;mxCell collapsed="1" parent="1" style="rule" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="1920.0" y="164.5234375"/&gt;&lt;/mxCell&gt;&lt;/Rule&gt;&lt;Link conditional="true" id="71" label="Yes" name="" outcomeId="Yes" ruleUUID="1706a988-73a1-45d8-897a-13d9d837991a" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="69" style="link" target="64"&gt;&lt;mxGeometry as="geometry" x="259.0" y="140.5234375"&gt;&lt;mxPoint as="targetPoint" x="1009.0" y="161.5234375"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="2100.0" y="180.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="48.0" y="-163.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="false" id="72" label="No" name="" outcomeId="No" ruleUUID="1706a988-73a1-45d8-897a-13d9d837991a" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="69" style="link" target="73"&gt;&lt;mxGeometry as="geometry" x="259.0" y="140.5234375"&gt;&lt;mxPoint as="targetPoint" x="822.0" y="260.5234375"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1936.0" y="221.0"/&gt;&lt;mxPoint x="2040.0" y="221.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="8.0" y="-10.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="86071c41-7d0a-41fd-a1e7-edc566172f24" id="73" label="GoTo OCR" name="GoTo OCR" streamed="false" taskUUID="c740a71a-6096-4031-a63c-fd930fbec668" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="41.0" width="121.0" x="1960.0" y="248.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="81" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="4cd8cb29-724e-4a5b-8254-44340f153d96" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="73" style="link" target="57"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"/&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="ed9057d8-831e-4a83-b9c0-1ece55ad842f" id="57" label="Split document into PNG pages" name="Split document into PNG pages" taskUUID="68d6e4bf-728d-42c3-b959-fe50ac6e859d" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1742.0" y="238.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="91" name="" outcomeId="ApproveAll" ruleUUID="84f0ac1c-8a30-4581-a8b2-8e39b640f280" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="57" style="link" target="53"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="sourcePoint" x="1207.0" y="380.1900634765625"/&gt;&lt;mxPoint as="targetPoint" x="849.0" y="330.5234375"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1590.0" y="268.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Rule id="53" name="OCR Type" ruleUUID="cfd635f7-c569-4402-932d-32198e54c267" type="rule"&gt;&lt;mxCell collapsed="1" parent="1" style="rule" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="1572.0" y="298.5234375"/&gt;&lt;/mxCell&gt;&lt;/Rule&gt;&lt;MachineTask campaignMapUUID="af5bedf3-0e22-4779-aab7-7cda6d50e659" id="58" name="[TOOD] OCR" taskUUID="11e314fa-9f2b-4589-98d1-1b708d550ee1" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1396.0" y="350.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="59" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="0c03a55e-26ee-4e38-8610-0071ff7a8bbc" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="58" style="link" target="60"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;mxPoint as="sourcePoint" x="399.0" y="450.5234375"/&gt;&lt;mxPoint as="targetPoint" x="399.0" y="440.5234375"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1476.0" y="440.0"/&gt;&lt;mxPoint x="1570.0" y="440.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="343f9281-4ef9-4d70-bbad-f3bdf5fca056" id="54" label="[Standard] OCR" name="[Standard] OCR" taskUUID="312882ff-9e2d-4be6-ad4a-6c699ab39a34" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1612.1166687011719" y="350.05677795410156"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="61" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="2ced06e3-7fe6-40a5-b067-8f244b8cc756" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="54" style="link" target="60"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1692.0" y="440.0"/&gt;&lt;mxPoint x="1586.0" y="440.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="ba96a66b-d304-4800-a082-a866f2479d2f" id="60" name="Response from OCR" taskUUID="0de6f169-fd47-4bcc-ab0f-2c510919caba" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1506.0" y="459.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="87" name="" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="60" style="link" target="86"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"/&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Rule id="86" name="OCR Router" ruleUUID="4923268f-982e-4832-a769-9fe3068d8de3" type="rule"&gt;&lt;mxCell collapsed="1" parent="1" style="rule" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="1290.0" y="612.5234375"/&gt;&lt;/mxCell&gt;&lt;/Rule&gt;&lt;Link conditional="true" id="88" label="OCR Failed" name="" outcomeId="OCR Failed" ruleUUID="4923268f-982e-4832-a769-9fe3068d8de3" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="86" style="link" target="51"&gt;&lt;mxGeometry as="geometry"&gt;&lt;mxPoint as="targetPoint" x="15.0" y="506.5234375"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1323.0" y="629.0"/&gt;&lt;mxPoint x="1323.0" y="590.0"/&gt;&lt;mxPoint x="1841.0" y="590.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="128.0" y="3.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="true" id="89" label="OCR Not Failed" name="" outcomeId="OCR Not Failed" ruleUUID="4923268f-982e-4832-a769-9fe3068d8de3" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="86" style="link" target="80"&gt;&lt;mxGeometry as="geometry"&gt;&lt;mxPoint as="targetPoint" x="15.0" y="506.5234375"/&gt;&lt;Array as="points"/&gt;&lt;mxPoint as="offset" x="5.0" y="-14.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="true" id="90" label="Standard (without xml export format)" name="" outcomeId="Standard (without xml export format)" ruleUUID="4923268f-982e-4832-a769-9fe3068d8de3" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="86" style="link" target="68"&gt;&lt;mxGeometry as="geometry"&gt;&lt;mxPoint as="targetPoint" x="15.0" y="491.5234375"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1301.0" y="810.0"/&gt;&lt;mxPoint x="1292.0" y="810.0"/&gt;&lt;mxPoint x="1292.0" y="860.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="-183.0" y="118.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="ae018421-0201-4382-95d9-97db428894ea" id="80" name="(Copy) Split PDF into PNG pages for manual task" taskUUID="5502d046-c42c-4f44-b3d3-e99df015abb2" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="156.0" x="1350.0" y="658.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="36" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="f256cc3f-04d8-4dfa-9436-fab81cf45846" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="80" style="link" target="56"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1418.0" y="730.0"/&gt;&lt;mxPoint x="1420.0" y="730.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="ee6de45b-1e2b-409c-93c1-deb4312719cc" id="56" name="XSLT Cut off Raw OCR XML tags" taskUUID="ec327afb-02ca-4f78-b9f4-53d54a7ae058" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1340.0" y="759.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="66" name="" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="56" style="link" target="65"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"/&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Rule id="65" name="OCR Type" ruleUUID="b0cfe2f8-d9e1-45a3-a4f2-cbade461f59a" type="rule"&gt;&lt;mxCell collapsed="1" parent="1" style="rule" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="1524.0" y="714.5234375"/&gt;&lt;/mxCell&gt;&lt;/Rule&gt;&lt;Link conditional="true" id="85" label="Standard" name="" outcomeId="Standard" ruleUUID="b0cfe2f8-d9e1-45a3-a4f2-cbade461f59a" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="65" style="link" target="82"&gt;&lt;mxGeometry as="geometry" x="259.0" y="140.5234375"&gt;&lt;mxPoint as="targetPoint" x="279.0" y="745.5234375"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1580.0" y="731.0"/&gt;&lt;mxPoint x="1580.0" y="780.0"/&gt;&lt;mxPoint x="1570.0" y="780.0"/&gt;&lt;mxPoint x="1570.0" y="810.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="9.0" y="30.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="true" id="84" label="TOOD" name="" outcomeId="TOOD" ruleUUID="b0cfe2f8-d9e1-45a3-a4f2-cbade461f59a" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="65" style="link" target="50"&gt;&lt;mxGeometry as="geometry" x="259.0" y="140.5234375"&gt;&lt;mxPoint as="targetPoint" x="279.0" y="745.5234375"/&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1580.0" y="731.0"/&gt;&lt;mxPoint x="1580.0" y="670.0"/&gt;&lt;/Array&gt;&lt;mxPoint as="offset" x="2.0" y="-37.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="4a6d031f-db74-4586-972a-7263945187d5" id="50" name="[TOOD] XSLT XML Enrichment with WORD and DIV tags" taskUUID="5090ed59-2c18-441d-ab1b-2fa34e61089c" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1600.0" y="640.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="78" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="b3b3ddf4-adac-44de-9e83-17ce7f8e7c4e" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="50" style="link" target="77"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"/&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="1c65757b-b8b1-4b7e-86bb-f586f5268007" id="82" name="[Standard] Minimap creation" taskUUID="30d3ed89-3a0c-4f8d-81ef-25eafde049c1" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1650.0" y="759.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="83" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="c06e9356-2723-417e-b4bc-47cea6849df9" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="82" style="link" target="68"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1990.0" y="790.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="1aaab266-9cbe-4413-b564-14353e682a9d" id="77" name="[TOOD] Minimap creation" taskUUID="9749dc74-5d37-4524-9cef-742a5c97347f" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1857.0" y="644.5234375"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="79" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="6923fc3b-99b3-4bd8-92bf-1771806d90d9" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="77" style="link" target="68"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;Array as="points"&gt;&lt;mxPoint x="1937.0" y="760.0"/&gt;&lt;mxPoint x="2040.0" y="760.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="06cc44b0-9aa3-4e7a-b9b7-2c909943b185" id="68" name="Cache OCR results" taskUUID="9b96d748-3ca0-4cc9-9ee5-a7e64487cd14" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1960.1166687011719" y="812.7567749023438"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="75" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="8278b129-7895-4ecc-9cae-fabb4718dc43" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="68" style="link" target="64"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"&gt;&lt;Array as="points"&gt;&lt;mxPoint x="2100.0" y="670.0"/&gt;&lt;mxPoint x="2100.0" y="670.0"/&gt;&lt;/Array&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;MachineTask campaignMapUUID="c1f197a4-d45f-4f56-a77a-0af1cd50af01" id="64" name="Result JSON processing" taskUUID="830299d4-be59-4bba-bb1c-31211235fd4c" type="machine_task"&gt;&lt;mxCell collapsed="1" parent="1" style="machine_task" vertex="1"&gt;&lt;mxGeometry as="geometry" height="60.0" width="160.0" x="1980.1166687011719" y="470.05677795410156"/&gt;&lt;/mxCell&gt;&lt;/MachineTask&gt;&lt;Link id="76" name="" outcome="ApproveAll" outcomeId="ApproveAll" ruleUUID="bd41a18a-2529-471f-804d-3735cf6162dc" type="link"&gt;&lt;mxCell collapsed="1" edge="1" parent="1" source="64" style="link" target="51"&gt;&lt;mxGeometry as="geometry" relative="1" x="0.5" y="10.0"/&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;SubEnd campaignMapUUID="4d706818-ad79-497d-9c58-0cd2bf990b2e" id="51" name="End" type="sub_end"&gt;&lt;mxCell collapsed="1" parent="1" style="end" vertex="1"&gt;&lt;mxGeometry as="geometry" height="32.0" width="32.0" x="1830.0" y="513.5234375"/&gt;&lt;/mxCell&gt;&lt;/SubEnd&gt;&lt;Link conditional="true" id="93" label="Standard" name="" outcomeId="Standard" ruleUUID="cfd635f7-c569-4402-932d-32198e54c267" type="link"&gt;&lt;mxCell edge="1" parent="1" source="53" style="link" target="54"&gt;&lt;mxGeometry as="geometry"&gt;&lt;mxPoint as="targetPoint" x="1692.0" y="314.5234375"/&gt;&lt;Array as="points"/&gt;&lt;mxPoint as="offset" x="2.0" y="-22.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;Link conditional="true" id="94" label="TOOD" name="" outcomeId="TOOD" ruleUUID="cfd635f7-c569-4402-932d-32198e54c267" type="link"&gt;&lt;mxCell edge="1" parent="1" source="53" style="link" target="58"&gt;&lt;mxGeometry as="geometry"&gt;&lt;mxPoint as="targetPoint" x="1692.0" y="314.5234375"/&gt;&lt;Array as="points"/&gt;&lt;mxPoint as="offset" x="-4.0" y="-23.0"/&gt;&lt;/mxGeometry&gt;&lt;/mxCell&gt;&lt;/Link&gt;&lt;/root&gt;&lt;/mxGraphModel&gt;</compositeStructureXml>
                    <description>Business Process description</description>
                    <executingType>COMPOSITE</executingType>
                    <goldBucketBlockSize>0</goldBucketBlockSize>
                    <goldRatio>0</goldRatio>
                    <goldSource>Empty</goldSource>
                    <goldType>Percentage</goldType>
                    <moderation>false</moderation>
                    <origination>CREATED_AUTOMATICALLY</origination>
                    <requiresData>true</requiresData>
                    <status>ACTIVE</status>
                    <streamComplexRunThreshold>1</streamComplexRunThreshold>
                    <streamTimeInterval>Immediately</streamTimeInterval>
                    <streamTimeIntervalValue>0</streamTimeIntervalValue>
                    <streamValueType>Tasks</streamValueType>
                    <title>WF OCR v3</title>
                    <type>COMPOSITE</type>
                    <uuid>68ab9c03-db28-4f85-bf9c-20204a7124e8</uuid>
                    <validWorkflow>true</validWorkflow>
                    <version>
                        <componentUuid>23728383-dec7-42c1-9a0e-f1e5f256100c</componentUuid>
                        <incrementalVersion>1.2</incrementalVersion>
                        <lastInChain>true</lastInChain>
                        <lastModified>2018-09-25T13:10:25Z</lastModified>
                        <versionUuid>253bf6f3-b292-4f41-a934-c32a944ce612</versionUuid>
                    </version>
                    <workSettingBase>true</workSettingBase>
                </campaign>
            </compositeWorkSetting>
            <hashCode>-447933794</hashCode>
        </objectContainer>
    </objects>
</objectListWrapper>
